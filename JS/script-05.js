//!   –§—É–Ω–∫—Ü—ñ—è —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è
// ? –ó–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó (–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–µ—ó) –º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —É –∑–º—ñ–Ω–Ω—ñ–π –∞–±–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –≤ —è–∫–æ—Å—Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç—É –≤ —ñ–Ω—à—É —Ñ—É–Ω–∫—Ü—ñ—é. –£ —Ü—å–æ–º—É —Å–µ–Ω—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ
// –≤—ñ–¥—Ä—ñ–∑–Ω—è—é—Ç—å—Å—è –≤—ñ–¥ —á–∏—Å–µ–ª, —Ä—è–¥–∫—ñ–≤ –∞–±–æ –º–∞—Å–∏–≤—ñ–≤.
// function greet(name) {
//   return `Welcome ${name}!`;
// }

// // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é greet —ñ –≤–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∫–æ–Ω—Å–æ–ª—å
// console.log(greet("Mango")); // "Welcome Mango!"
// // –í–∏–≤–æ–¥–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—é greet —É –∫–æ–Ω—Å–æ–ª—å, –Ω–µ –≤–∏–∫–ª–∏–∫–∞—é—á–∏ —ó—ó
// console.log(greet); // ∆í greet() {return `Welcome ${name}!`}
// –£ –ø–µ—Ä—à–æ–º—É –ª–æ–∑—ñ –º–∏ –≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é greet –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫—Ä—É–≥–ª–∏—Ö –¥—É–∂–æ–∫, —ñ –≤ –∫–æ–Ω—Å–æ–ª—å –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ó—ó –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.
// –£ –¥—Ä—É–≥–æ–º—É –ª–æ–∑—ñ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é, –∞ –Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ó—ó –≤–∏–∫–ª–∏–∫—É(–≤—ñ–¥—Å—É—Ç–Ω—ñ –∫—Ä—É–≥–ª—ñ –¥—É–∂–∫–∏),
// —Ç–æ–º—É –≤ –∫–æ–Ω—Å–æ–ª—å –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—î –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –Ω–∞—à–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó.–¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é –º–æ–∂–Ω–∞ –∑–∞–ø–∏—Å–∞—Ç–∏ —É –∑–º—ñ–Ω–Ω—É –∞–±–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç —ñ–Ω—à—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó.
// –§—É–Ω–∫—Ü—ñ—è —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è
// –£ JavaScript —Ñ—É–Ω–∫—Ü—ñ—ó ‚Äî —Ü–µ –æ–±'—î–∫—Ç–∏, —Ç–æ–º—É –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å:

// –ó–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—è —É –∑–º—ñ–Ω–Ω–∏—Ö

// –ü–µ—Ä–µ–¥–∞–≤–∞—Ç–∏—Å—è —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤ —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// –í–∏–≤–æ–¥–∏—Ç–∏—Å—è —É –∫–æ–Ω—Å–æ–ª—å –±–µ–∑ –≤–∏–∫–ª–∏–∫—É

// –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ console.log(greet("Mango")) —ñ console.log(greet)
// üîπ –ü–µ—Ä—à–∏–π –≤–∏–ø–∞–¥–æ–∫:
// console.log(greet("Mango"));
// –í–∏–∫–ª–∏–∫–∞—î–º–æ greet("Mango") (–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫—Ä—É–≥–ª–∏—Ö –¥—É–∂–æ–∫).
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î "Welcome Mango!", —ñ —Ü–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å.

// üîπ –î—Ä—É–≥–∏–π –≤–∏–ø–∞–¥–æ–∫:

// javascript
// console.log(greet);
// –¢—É—Ç –ù–ï –≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, –∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–µ—ó.

// –í –∫–æ–Ω—Å–æ–ª—å –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —ó—ó –≤–Ω—É—Ç—Ä—ñ—à–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (—Ç–æ–±—Ç–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–∞–º–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó).

// –©–æ —Ü–µ –Ω–∞–º –¥–∞—î?
// –û—Å–∫—ñ–ª—å–∫–∏ –º–∏ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è, —ó—ó –º–æ–∂–Ω–∞: ‚úîÔ∏è –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —É –∑–º—ñ–Ω–Ω—ñ–π:

// javascript
// const sayHello = greet;
// console.log(sayHello("Alice")); // "Welcome Alice!"

// –ü–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –≤ —ñ–Ω—à—É —Ñ—É–Ω–∫—Ü—ñ—é —è–∫ –∫–æ–ª–±–µ–∫:

// javascript
// function processUser(name, callback) {
//     return callback(name);
// }
// console.log(processUser("Bob", greet)); // "Welcome Bob!"
// –¢—É—Ç greet –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –±–µ–∑ –≤–∏–∫–ª–∏–∫—É(greet –±–µ–∑()), —ñ –ø–æ—Ç—ñ–º processUser –≤–∂–µ –≤–∏–∫–ª–∏–∫–∞—î —ó—ó.
// –ß–æ–º—É —Ü–µ –≤–∞–∂–ª–∏–≤–æ?
// –¶—è –æ—Å–æ–±–ª–∏–≤—ñ—Å—Ç—å –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–º –±—É–¥—É–≤–∞—Ç–∏ –≥–Ω—É—á–∫–∏–π —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∫–æ–¥.–ó–∞–≤–¥—è–∫–∏ —Ü—å–æ–º—É –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—ó,
// –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ.
// –ó–∞–¥–∞—á–∞:
// The makePizza function returns a string with a message to the client.

// Complete the code so that the result variable contains the result of the makePizza function, and the pointer variable contains
// a reference to the makePizza function.

// The makePizza function is declared.
// The variable result is declared.
// The value of the result variable is the string ‚ÄòYour pizza is being prepared, please wait.‚Äô.
// The value of the result variable is obtained by calling the function.
// The variable pointer is declared.
// The value of the pointer variable is a reference to the makePizza function.

// function makePizza() {
//     return "Your pizza is being prepared, please wait.";
//   }
//   // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∑–º—ñ–Ω–Ω—ñ–π result
// const result = makePizza();

// // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é —É –∑–º—ñ–Ω–Ω—ñ–π pointer
// const pointer = makePizza;

// console.log(result);  // "Your pizza is being prepared, please wait."
// console.log(pointer); // ∆í makePizza() { return "Your pizza is being prepared, please wait."; }

//?  –ö–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// –û–≥–æ–ª–æ—Å–∏–º–æ –¥–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó greet —ñ notify, —è–∫—ñ –ø—Ä–∏–π–º–∞—é—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –≤–∏–≤–æ–¥—è—Ç—å —Ä—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

// function greet(name) {
//   console.log(`Welcome ${name}!`);
// }

// function notify(name) {
//   console.log(`Dear ${name}, your room will be ready in 30 minutes`);
// }

// // –î–∞–ª—ñ –æ–≥–æ–ª–æ—Å–∏–º–æ —â–µ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é registerGuest, —è–∫–∞ –ø—Ä–∏–π–º–∞—Ç–∏–º–µ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.

// function registerGuest(name, callback) {
//   console.log(`Registering ${name}!`);
//   callback(name);
// }
// name ‚Äî —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
// callback ‚Äî –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—É —Ç—Ä–µ–±–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤ —Ç—ñ–ª—ñ registerGuest —ñ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ó–π —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á

// –¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–≥–æ–ª–æ—à–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É registerGuest.

// function greet(name) {
//   console.log(`Welcome ${name}!`);
// }

// function notify(name) {
//   console.log(`Dear ${name}, your room will be ready in 30 minutes`);
// }

// function registerGuest(name, callback) {
//   console.log(`Registering ${name}!`);
//   callback(name);
// }

// registerGuest("Mango", greet); // "Registering Mango!"
// 															 // "Welcome Mango!"

// registerGuest("Mango", notify); // "Registering Mango!"
// "Dear Mango, your room will be ready in 30 minutes"
// –ú–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é greet –∞–±–æ notify —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç, —Ç–æ–º—É –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –ø—Ä–∏—Å–≤–æ—î–Ω—ñ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä callback —ñ –≤–∏–∫–ª–∏–∫–∞–Ω—ñ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// registerGuest –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫—Ä—É–≥–ª–∏—Ö –¥—É–∂–æ–∫.

// –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É (callback, –∫–æ–ª–±–µ–∫) ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —ñ–Ω—à—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç, –∞ —Ç–∞ —É —Å–≤–æ—é —á–µ—Ä–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–µ—Ä–µ–¥–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é.

// –£ –ø—Ä–∏–∫–ª–∞–¥—ñ —Ñ—É–Ω–∫—Ü—ñ—ó greet —ñ notify ‚Äî —Ü–µ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó, —Ç–æ–º—É —â–æ –º–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ —ó—Ö —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç —É —Ñ—É–Ω–∫—Ü—ñ—é registerGuest.
// –Ü–º'—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∫–æ–ª–±–µ–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—ñ–ª—å–Ω–∏–º, –≥–æ–ª–æ–≤–Ω–µ –ø–∞–º'—è—Ç–∞—Ç–∏, —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è–º –±—É–¥–µ —Ñ—É–Ω–∫—Ü—ñ—è.


// –§—É–Ω–∫—Ü—ñ—è –≤–∏—â–æ–≥–æ –ø–æ—Ä—è–¥–∫—É (higher order function) ‚Äî —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –≤ —è–∫–æ—Å—Ç—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Ñ—É–Ω–∫—Ü—ñ—é –≤ —è–∫–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.

// –£ –ø—Ä–∏–∫–ª–∞–¥—ñ —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è registerGuest, —Ç–æ–º—É —â–æ –≤–æ–Ω–∞ –æ—á—ñ–∫—É—î —ñ–Ω—à—É —Ñ—É–Ω–∫—Ü—ñ—é —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä —ñ –≤–∏–∫–ª–∏–∫–∞—î —ó—ó.

//* –í–∏–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–µ—Ä–µ–¥–∞—á—ñ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó `updateEmail` –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó `makeAction`

// makeAction(updateEmail())
// updateEmail(makeAction)
//*  makeAction(updateEmail)
// updateEmail(makeAction())
// Result
// –Ü —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å! –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é updateEmail –º–∞—î –ø–µ—Ä–µ–¥–∞—Ç–∏—Å—å —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç —É –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏—â–æ–≥–æ –ø–æ—Ä—è–¥–∫—É makeAction. –û—Ç–∂–µ,
// makeAction(updateEmail) —î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º.

// –ó–∞–¥–∞—á–∞:
// The function makeMessage takes one parameter, the name of the pizza being delivered, pizzaName, and returns a string with a
// message for the customer.

// Enhance the makeMessage function so that it expects a second parameter(the callback parameter) as a callback function and returns the result of its
// invocation.The functions deliverPizza or makePizza will be passed as callbacks to makeMessage and will expect the name of the delivered pizza as an argument.

// The function deliverPizza is declared.
// The function makePizza is declared.
// The function makeMessage is declared.
// The function makeMessage takes two parameters, named according to the task, pizzaName and callback.
// The call makeMessage("Royal Grand", makePizza) returns the string "Pizza Royal Grand is being prepared, please wait...".
// The call makeMessage("Ultracheese", deliverPizza) returns the string "Delivering Ultracheese pizza.".

// function deliverPizza(pizzaName) {
//     return `Delivering ${pizzaName} pizza.`;
// }
// function makePizza(pizzaName) {
//     return `Pizza ${pizzaName} is being prepared, please wait...`;
    
// }
// function makeMessage(pizzaName, callback) {
//     return callback(pizzaName);
// }
// console.log(makeMessage("Royal Grand", makePizza)); // "Pizza Royal Grand is being prepared, please wait..."
// console.log(makeMessage("Ultracheese", deliverPizza)); // "Delivering Ultracheese pizza."

//?   –Ü–Ω–ª–∞–π–Ω-–∫–æ–ª–±–µ–∫–∏

// –Ø–∫—â–æ –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—è –º–∞–ª–µ–Ω—å–∫–∞ —ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º, —ó—ó –º–æ–∂–Ω–∞ –æ–≥–æ–ª–æ—Å–∏—Ç–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó, –≤ —è–∫—É –ø–µ—Ä–µ–¥–∞—î–º–æ –∫–æ–ª–±–µ–∫.
// –¢–∞–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞–∑–∏–≤–∞—é—Ç—å—Å—è —ñ–Ω–ª–∞–π–Ω - –∫–æ–ª–±–µ–∫–∏.–í–æ–Ω–∏ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –≤ —è–∫–æ—Å—Ç—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —ñ –±—ñ–ª—å—à–µ –Ω—ñ–¥–µ –≤ –∫–æ–¥—ñ.

// function registerGuest(name, callback) {
//   console.log(`Registering ${name}!`);
//   callback(name);
// }

// // –ü–µ—Ä–µ–¥–∞—î–º–æ —ñ–Ω–ª–∞–π–Ω-—Ñ—É–Ω–∫—Ü—ñ—é greet —É —è–∫–æ—Å—Ç—ñ –∫–æ–ª–±–µ–∫–∞
// registerGuest("Mango", function greet(name) {
//   console.log(`Welcome ${name}!`);
// });

// // –ü–µ—Ä–µ–¥–∞—î–º–æ —ñ–Ω–ª–∞–π–Ω-—Ñ—É–Ω–∫—Ü—ñ—é notify —É —è–∫–æ—Å—Ç—ñ –∫–æ–ª–±–µ–∫–∞
// registerGuest("Poly", function notify(name) {
//   console.log(`Dear ${name}, your room will be ready in 30 minutes`);
// });
// –ó–ê–î–ê–ß–ê:
// The function makePizza has two parameters: pizzaName ‚Äî the name of the pizza, and callback ‚Äî the callback function. During execution, makePizza calls this callback,
// passing pizzaName as an argument.

// Complete the second call to the function makePizza(pizzaName, callback) by passing the inline callback function eatPizza(pizzaName) as the second argument.
// he callback eatPizza logs the string "Eating pizza <pizza name>", where < pizza name > is the value of the parameter pizzaName.

// The function makePizza has been declared.
// The function makePizza accepts two parameters.
// The function eatPizza with a single parameter pizzaName has been passed as the second argument during the call makePizza("Ultracheese").

// function makePizza(pizzaName, callback) {
//     console.log(`Pizza ${pizzaName} is being prepared, please wait...`);
//     callback(pizzaName);
//   }
  
  // –ö–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—è eatPizza
//   function eatPizza(pizzaName) {
//     console.log(`Eating pizza ${pizzaName}`);
//   }
  
  // –í–∏–∫–ª–∏–∫ makePizza –∑ –∞–Ω–æ–Ω—ñ–º–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—î—é
//   makePizza("Royal Grand", function deliverPizza(pizzaName) {
//     console.log(`Delivering pizza ${pizzaName}`);
//   });
  
  // –í–∏–∫–ª–∏–∫ makePizza –∑ eatPizza —è–∫ –∫–æ–ª–±–µ–∫–æ–º
//   makePizza("Ultracheese", eatPizza);

//? –ú–µ—Ç–æ–¥ forEach(callback) ‚Äî —Ü–µ –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è –º–∞—Å–∏–≤—É, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∑–∞–º—ñ–Ω–∏ —Ü–∏–∫–ª—ñ–≤ for —ñ for...of –≤ —Ä–æ–±–æ—Ç—ñ –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é.

// array.forEach(function callback(element, index, array) {
  // –¢—ñ–ª–æ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// });

// –ü–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –º–∞—Å–∏–≤ array
// –í–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É
// –ü–æ–≤–µ—Ä—Ç–∞—î undefined, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —è–≤–Ω–æ –∑–∞–¥–∞—Ç–∏ –≤–∏—Ä–∞–∑ –ø—ñ—Å–ª—è return

// –ö–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—è –º–µ—Ç–æ–¥—É forEach() –∑–∞–≤–∂–¥–∏ –æ—Ç—Ä–∏–º—É—î —Ç–∞–∫—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É element, –π–æ–≥–æ —ñ–Ω–¥–µ–∫—Å index —ñ –≤–ª–∞—Å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤ array. –ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É, —â–æ —ñ–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–æ–≤—ñ–ª—å–Ω—ñ, –∞–ª–µ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∞ —ó—Ö –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å(!). –¢–∞–∫–æ–∂ –Ω–µ –≤—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –æ–≥–æ–ª–æ—à—É–≤–∞—Ç–∏. –Ø–∫—â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä element (—Ü–µ –Ω–∞–π—á–∞—Å—Ç—ñ—à–∏–π –≤–∏–ø–∞–¥–æ–∫), —Ç–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ index —Ç–∞ array –º–æ–∂–Ω–∞ –Ω–µ –æ–≥–æ–ª–æ—à—É–≤–∞—Ç–∏.
// const numbers = [5, 10, 15, 20, 25];

// –ö–ª–∞—Å–∏—á–Ω–∏–π for
// for (let i = 0; i < numbers.length; i += 1) {
//   console.log(`Index ${i}, value ${numbers[i]}`);
// }

// –ü–µ—Ä–µ–±–∏—Ä–∞—é—á–∏–π –º–µ—Ç–æ–¥ forEach
// numbers.forEach(function (number, index) {
//   console.log(`Index ${index}, value ${number}`);
// });

// –ú–µ—Ç–æ–¥ forEach() ‚Äî —Ü–µ –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –ø–µ—Ä–µ–±—Ä–∞—Ç–∏ –º–∞—Å–∏–≤, –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ü–∏–∫–ª–∏ for –∞–±–æ for...of. –í—ñ–Ω –¥–æ–∑–≤–æ–ª—è—î –∑–æ—Å–µ—Ä–µ–¥–∏—Ç–∏—Å—è –Ω–∞ –ª–æ–≥—ñ—Ü—ñ –æ–±—Ä–æ–±–∫–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É, –∞ –Ω–µ –Ω–∞ –º–µ—Ö–∞–Ω—ñ—Ü—ñ –ø–µ—Ä–µ–±–æ—Ä—É.
// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è forEach() —Ä–æ–±–∏—Ç—å –∫–æ–¥ –±—ñ–ª—å—à —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–º —ñ –∑—Ä–æ–∑—É–º—ñ–ª–∏–º, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω —è–≤–Ω–æ –ø–æ–∫–∞–∑—É—î –Ω–∞–º, —â–æ –º–∏ –ø–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –º–∞—Å–∏–≤ —ñ –≤–∏–∫–æ–Ω—É—î–º–æ –ø–µ–≤–Ω—É –¥—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞.
// –ê–ª–µ —î –¥–µ—è–∫—ñ –Ω—é–∞–Ω—Å–∏, —è–∫—ñ –≤–∞—Ä—Ç–æ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ forEach():
// 1. forEach() –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –Ω–µ —á–µ–∫–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞.
// 2. forEach() –Ω–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –∞–±–æ –≤–∏–π—Ç–∏ –∑ –Ω—å–æ–≥–æ, —è–∫ —Ü–µ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –∑ —Ü–∏–∫–ª–∞–º–∏ for –∞–±–æ for...of. –í—ñ–Ω –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–±–∏—Ä–∞—î –≤–µ—Å—å –º–∞—Å–∏–≤ –¥–æ –∫—ñ–Ω—Ü—è.
// 3. forEach() –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –∞ –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î undefined, —Ç–æ–º—É –π–æ–≥–æ –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–∞—Å–∏–≤—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ.
// 4. forEach() –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤, –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏.
// 5. forEach() –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤, –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É –Ω–∞ –ø–µ–≤–Ω–æ–º—É –µ—Ç–∞–ø—ñ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–±–∏—Ä–∞—î –≤–µ—Å—å –º–∞—Å–∏–≤ –¥–æ –∫—ñ–Ω—Ü—è.
// 6. forEach() –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤, –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏.
// 7. forEach() –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤, –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É –Ω–∞ –ø–µ–≤–Ω–æ–º—É –µ—Ç–∞–ø—ñ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–±–∏—Ä–∞—î –≤–µ—Å—å –º–∞—Å–∏–≤ –¥–æ –∫—ñ–Ω—Ü—è.	

// –Ñ–¥–∏–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫, –∫–æ–ª–∏ –≤–∞—Ä—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü–∏–∫–ª–∏ for –∞–±–æ for...of –¥–ª—è –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è –º–∞—Å–∏–≤—É, ‚Äî —Ü–µ –∑–∞–¥–∞—á—ñ –∑ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü–∏–∫–ª—É. –ü–µ—Ä–µ—Ä–≤–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É forEach –Ω–µ –º–æ–∂–Ω–∞, –≤—ñ–Ω –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–±–∏—Ä–∞—î –º–∞—Å–∏–≤ –¥–æ –∫—ñ–Ω—Ü—è.
// –©–æ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç–æ–¥ forEach?

// –ù–æ–≤–∏–π –º–∞—Å–∏–≤
//* –ü–æ–≤–µ—Ä—Ç–∞—î undefined
// –¢–µ, —â–æ –≤–∫–∞–∑–∞–Ω–æ –≤ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// Result

// –í–∞—Ä—Ç–æ –∑–∞–ø–∞–º‚Äô—è—Ç–∞—Ç–∏: –º–µ—Ç–æ–¥ `forEach(callback)` : 1) –ø–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –º–∞—Å–∏–≤, 2) –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É, * 3) –ø–æ–≤–µ—Ä—Ç–∞—î `undefined`.

// –ó–∞–¥–∞—á–∞:
// The calculateTotalPrice(orderedItems) function takes one parameter orderedItems ‚Äî an array of numbers, and calculates the total sum of its elements, which is stored in
//     the variable totalPrice and returned as the result of the function.

// Complete the call to the forEach method by passing it a callback function that adds the value of the current item of the orderedItems array to totalPrice at each iteration.

// The calculateTotalPrice(orderedItems) function is declared.
// Calling the calculateTotalPrice([12, 85, 37, 4]) function returns 138.
// Calling the calculateTotalPrice([164, 48, 291]) function returns 503.
// Calling the calculateTotalPrice([412, 371, 94, 63, 176]) function returns 1116.
// Calling a function with random but valid arguments returns the correct value.

// function calculateTotalPrice(orderedItems) {
//     let totalPrice = 0;
  
//     orderedItems.forEach(item => {
//         totalPrice += item;
//     });
  
//     return totalPrice;
// }
// console.log(calculateTotalPrice([12, 85, 37, 4])); // 138
// console.log(calculateTotalPrice([164, 48, 291])); // 503
// console.log(calculateTotalPrice([412, 371, 94, 63, 176])); // 1116

// –ó–∞–¥–∞—á–∞:
// The function filterArray(numbers, value) takes an array of numbers numbers as its first parameter and returns a new array containing only those elements
// of the original array that are greater than the value of the second parameter value.If no such values are found, the function returns an empty array.

// Refactor the function so that instead of using a for loop, it uses the forEach method.

// A function filterArray(numbers, value) is declared.
// The forEach method is used to iterate over the array numbers.
// Calling filterArray([1, 2, 3, 4, 5], 3) returns [4, 5].
// Calling filterArray([1, 2, 3, 4, 5], 4) returns [5].
// Calling filterArray([1, 2, 3, 4, 5], 5) returns [].
// Calling filterArray([12, 24, 8, 41, 76], 38) returns [41, 76].
// Calling filterArray([12, 24, 8, 41, 76], 20) returns [24, 41, 76].
// Calling the function with random but valid arguments returns the correct value.

// function filterArray(numbers, value) {
//     const filteredNumbers = [];
    
//     numbers.forEach(number => {
//         if (number > value) {
//         filteredNumbers.push(number);
//         }
//     });
    
//     return filteredNumbers;
// }

// console.log(filterArray([1, 2, 3, 4, 5], 3)); // returns [4, 5]
// console.log(filterArray([1, 2, 3, 4, 5], 4)); // returns [5]
// console.log(filterArray([1, 2, 3, 4, 5], 5)); // [].
// console.log(filterArray([12, 24, 8, 41, 76],38));// [41, 76].
// console.log(filterArray([12, 24, 8, 41, 76], 20));// returns [24, 41, 76].


// ? –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
// –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó(—Å–ª–µ–Ω–≥ ‚Äî ‚Äú—Å—Ç—Ä—ñ–ª–∫–∏‚Äù) –º–∞—é—Ç—å —Å–∫–æ—Ä–æ—á–µ–Ω–∏–π, –ª–∞–∫–æ–Ω—ñ—á–Ω—ñ—à–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, —â–æ –∑–º–µ–Ω—à—É—î –æ–±—Å—è–≥ –∫–æ–¥—É, –æ—Å–æ–±–ª–∏–≤–æ –∫–æ–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—è –º–∞–ª–µ–Ω—å–∫–∞ –∞–±–æ —è–∫—â–æ –≤–æ–Ω–∞
// –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ –∫–æ–ª–±–µ–∫.
// –£—Å—ñ —Å—Ç—Ä—ñ–ª–∫–∏ —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è —è–∫ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –≤–∏—Ä–∞–∑, —ñ —ó—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—Ä–∏—Å–≤–æ—é–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ–π.

// // –ó–≤–∏—á–∞–π–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
// function classicAdd(a, b, c) {
//   return a + b + c;
// }

// // –¢–µ —Å–∞–º–µ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—î—é
// const arrowAdd = (a, b, c) => {
//   return a + b + c;
// };

// –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ function –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
// –û–¥—Ä–∞–∑—É –∑–∞–∑–Ω–∞—á–∞—î—Ç—å—Å—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
// –ü—ñ—Å–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–∏–º–≤–æ–ª => —ñ —Ç—ñ–ª–æ —Ñ—É–Ω–∫—Ü—ñ—ó —É —Ñ—ñ–≥—É—Ä–Ω–∏—Ö –¥—É–∂–∫–∞—Ö

// –Ø–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–µ–∫—ñ–ª—å–∫–∞, —Ç–æ –≤–æ–Ω–∏ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–æ–º—É –≤ –∫—Ä—É–≥–ª–∏—Ö –¥—É–∂–∫–∞—Ö, –º—ñ–∂ –∑–Ω–∞–∫–∞–º–∏ —Ä—ñ–≤–Ω–æ—Å—Ç—ñ = —ñ —Å—Ç—Ä—ñ–ª–∫–æ—é =>.

// const add = (a, b, c) => {
//   return a + b + c;
// };

// –Ø–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–¥–∏–Ω, –π–æ–≥–æ –º–æ–∂–Ω–∞ –æ–≥–æ–ª–æ—à—É–≤–∞—Ç–∏ –±–µ–∑ –∫—Ä—É–≥–ª–∏—Ö –¥—É–∂–æ–∫.
// const add = a => {
//   return a + 5;
// };

// –Ø–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ, —Ç–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ –∫—Ä—É–≥–ª—ñ –¥—É–∂–∫–∏.

// const greet = () => {
//   console.log("Hello!");
// };

// –ó–∞–¥–∞—á–∞:

// –öefactor the calculateTotalPrice() function so that it is declared as an arrow function.

// The variable calculateTotalPrice is declared.
// An arrow function with parameters is assigned to the calculateTotalPrice variable. (quantity, pricePerItem).
// Calling calculateTotalPrice(5, 100) returns 500.
// Calling calculateTotalPrice(8, 60) returns 480.
// Calling calculateTotalPrice(3, 400) returns 1200.
// Calling a function with random but valid arguments returns the correct value.

// const calculateTotalPrice = (quantity, pricePerItem) => {
//     return quantity * pricePerItem;
// }
// console.log(calculateTotalPrice(5, 100)); // 500
// console.log(calculateTotalPrice(8, 60)); // 480
// console.log(calculateTotalPrice(3, 400)); // 1200

//? –ù–µ—è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è

// –£ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –ø—ñ—Å–ª—è —Å–∏–º–≤–æ–ª—É => –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —ó—ó —Ç—ñ–ª–æ. –Ü—Å–Ω—É—î –¥–≤–∞ —Å–ø–æ—Å–æ–±–∏ –∑–∞–ø–∏—Å—É: –∑ —Ñ—ñ–≥—É—Ä–Ω–∏–º–∏ –¥—É–∂–∫–∞–º–∏ —ñ –±–µ–∑ –Ω–∏—Ö.
// –ó–∞–ø–∏—Å —ñ–∑ —Ñ—ñ–≥—É—Ä–Ω–∏–º–∏ –¥—É–∂–∫–∞–º–∏
// –Ø–∫—â–æ —î —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏ —ñ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —è–∫–µ—Å—å –∑–Ω–∞—á–µ–Ω–Ω—è, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —è–≤–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ return. –¶–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è —è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è (explicit return).
// const add = (a, b, c) => {
//   console.log(a, b, c);
//   return a + b + c;
// };
// –¢–∞–∫–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ —Ç–æ–º—É –≤–∏–ø–∞–¥–∫—É, —è–∫—â–æ –≤ —Ç—ñ–ª—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ —â–µ —è–∫—ñ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó, –æ–∫—Ä—ñ–º –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è.
// –ó–∞–ø–∏—Å –±–µ–∑ —Ñ—ñ–≥—É—Ä–Ω–∏—Ö –¥—É–∂–æ–∫
// –Ø–∫—â–æ —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ, —Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏—Ä–∞–∑—É, —è–∫–∏–π —Å—Ç–æ—ó—Ç—å –ø—ñ—Å–ª—è =>.–¶–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –Ω–µ—è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è(implicit return). –£ –ø—Ä–∏–∫–ª–∞–¥—ñ
// –ø–æ–≤–µ—Ä–Ω–µ—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏—Ä–∞–∑—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ a, b —ñ c.

// const add = (a, b, c) => a + b + c;
// –°–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–µ—è–≤–Ω–æ–≥–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Å—É—Ç—Ç—î–≤–æ —Å–∫–æ—Ä–æ—á—É—î ¬´—à—É–º¬ª –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –∑ —Ç—ñ–ª–æ–º —ñ –≤–∏—Ä–∞–∑–æ–º, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è. –¢–∏–º –Ω–µ –º–µ–Ω—à, –≤—ñ–Ω –¥–æ—Ä–µ—á–Ω–∏–π —Ç—ñ–ª—å–∫–∏ —Ç–æ–¥—ñ, –∫–æ–ª–∏ –≤ —Ç—ñ–ª—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∂–æ–¥–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π, –æ–∫—Ä—ñ–º –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è.

// –î–æ
// function classicAdd(a, b, c) {
//   return a + b + c;
// }

// –ü—ñ—Å–ª—è
// const arrowAdd = (a, b, c) => a + b + c;
// –ó–∞–¥–∞—á–∞:
// Refactor the calculateTotalPrice() function so that it uses an implicit return.

// The variable calculateTotalPrice is declared.
// The variable calculateTotalPrice is assigned an arrow function with parameters (quantity, pricePerItem).
// The function uses an implicit return.
// Calling calculateTotalPrice(5, 100) returns 500.
// Calling calculateTotalPrice(8, 60) returns 480.
// Calling calculateTotalPrice(3, 400) returns 1200.
// Calling a function with random but valid arguments returns the correct value.

// const calculateTotalPrice = (quantity, pricePerItem) => quantity * pricePerItem;

// console.log(calculateTotalPrice(5, 100)); // 500
// console.log(calculateTotalPrice(8, 60)); // 480
// console.log(calculateTotalPrice(3, 400)); // 1200

//? –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤ arguments

// –£ —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –Ω–µ–º–∞—î –ª–æ–∫–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó arguments, —â–æ –º—ñ—Å—Ç–∏—Ç—å —É—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏. –Ø–∫—â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑—ñ–±—Ä–∞—Ç–∏ –≤—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤ –º–∞—Å–∏–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ü—ñ—è rest.

// const add = (...args) => {
//   console.log(args);
// };

// add(1, 2, 3); // [1, 2, 3]

// –ó–∞–¥–∞—á–∞:
// –ß–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—É arguments —É —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó?

// –¢–∞–∫
//* –ù—ñ
// Result

//* –°–∞–º–µ —Ç–∞–∫! –£ —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –Ω–µ–º–∞—î –ª–æ–∫–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó arguments.

// ? –ö–æ–ª–±–µ–∫–∏
// –ê–Ω–æ–Ω—ñ–º–Ω—ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥–º—ñ–Ω–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –¥–ª—è –∫–æ–ª–±–µ–∫—ñ–≤ –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –º–∞—Å–∏–≤—É –∑–∞–≤–¥—è–∫–∏ –∫–æ—Ä–æ—Ç—à–æ–º—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, –æ—Å–æ–±–ª–∏–≤–æ —è–∫—â–æ –∫–æ–¥ —É
// —Ç—ñ–ª—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ –≥—Ä–æ–º—ñ–∑–¥–∫–∏–π.

// const numbers = [5, 10, 15, 20, 25];

// –ó–≤–∏—á–∞–π–Ω–∞ –∞–Ω–æ–Ω—ñ–º–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
// numbers.forEach(function (number, index) {
//   console.log(`Index ${index}, value ${number}`);
// });

// –°—Ç—Ä—ñ–ª–æ—á–Ω–∞ –∞–Ω–æ–Ω—ñ–º–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
// numbers.forEach((number, index) => {
//   console.log(`Index ${index}, value ${number}`);
// });

// –°—Ç—Ä—ñ–ª–æ—á–Ω—É –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—é —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –æ–≥–æ–ª–æ—à—É–≤–∞—Ç–∏ –æ–∫—Ä–µ–º–æ –π –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –Ω–∞ –Ω–µ—ó –ø–æ—Å–∏–ª–∞–Ω–Ω—è.–¶–µ –≤–∞—Ä—Ç–æ —Ä–æ–±–∏—Ç–∏, —è–∫—â–æ –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –¥–µ–∫—ñ–ª—å–∫–æ—Ö
// –º—ñ—Å—Ü—è—Ö –ø—Ä–æ–≥—Ä–∞–º–∏ –∞–±–æ —è–∫—â–æ –≤–æ–Ω–∞ –≥—Ä–æ–º—ñ–∑–¥–∫–∞.

// const numbers = [5, 10, 15, 20, 25];

// const logMessage = (number, index) => {
//   console.log(`Index ${index}, value ${number}`);
// };

// numbers.forEach(logMessage);

// –ß–æ–º—É —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑—Ä—É—á–Ω—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —è–∫ –∫–æ–ª–±–µ–∫–∏?

//* –ó–∞–≤–¥—è–∫–∏ —ó—Ö–Ω—å–æ–º—É –∫–æ—Ä–æ—Ç—à–æ–º—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
// –¢–æ–º—É —â–æ –≤–æ–Ω–∏ –ø—Ä–∞—Ü—é—é—Ç—å —à–≤–∏–¥—à–µ, –Ω—ñ–∂ –∑–≤–∏—á–∞–π–Ω—ñ
// Result

// * –ó–≤—ñ—Å–Ω–æ, —Ç–∞–∫! –ê–Ω–æ–Ω—ñ–º–Ω—ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑—Ä—É—á–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ –∫–æ–ª–±–µ–∫–∏ –¥–ª—è –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –º–∞—Å–∏–≤—É –∑–∞–≤–¥—è–∫–∏ –∫–æ—Ä–æ—Ç—à–æ–º—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.

// –ó–∞–¥–∞—á–∞:

// Refactor the calculateTotalPrice(orderedItems) function by replacing its declaration with an arrow function. Also, replace the callback function passed to the forEach() method with an arrow function.

// The variable calculateTotalPrice is declared.
// The variable calculateTotalPrice is assigned an arrow function with the parameter (orderedItems).
// To iterate over the orderedItems array, the forEach method is used.
// The callback for the forEach method is an arrow function.
// Calling the calculateTotalPrice([12, 85, 37, 4]) function returns 138.
// Calling the calculateTotalPrice([164, 48, 291]) function returns 503.
// Calling the calculateTotalPrice([412, 371, 94, 63, 176]) function returns 1116.
// Calling a function with random but valid arguments returns the correct value.

//
// –ó–∞–¥–∞—á–∞: –ê —Ç–µ–ø–µ—Ä –¥–∞–≤–∞–π —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –∑–∞–¥–∞—á—É ¬´–§—ñ–ª—å—Ç—Ä —á–∏—Å–µ–ª¬ª?

// Replace the declaration of the filterArray() function and callbacks for the forEach() method with arrow functions.

// The variable filterArray is declared.
// The filterArray variable is assigned an arrow function with parameters (numbers, value).
// The forEach method is used to iterate over the numbers array.
// The callback for the forEach method is an arrow function.
// Calling the filterArray([1, 2, 3, 4, 5], 3) function returns [4, 5].
// Calling the filterArray([1, 2, 3, 4, 5], 4) function returns [5].
// Calling the filterArray([1, 2, 3, 4, 5], 5) function returns [].
// Calling the filterArray([12, 24, 8, 41, 76], 38) function returns [41, 76].
// Calling the filterArray([12, 24, 8, 41, 76], 20) function returns [24, 41, 76].
// A function call with random but valid arguments returns the correct value.

// function filterArray(numbers, value) {
//     const filteredNumbers = [];
  
//     numbers.forEach(function (number) {
//       if (number > value) {
//         filteredNumbers.push(number);
//       }
//     });
  
//     return filteredNumbers;
//   }

// // !  –ú–µ—Ç–æ–¥–∏ map —ñ flatMap
// //?   –ß–∏—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
//   –§—É–Ω–∫—Ü—ñ—è –∑ –ø–æ–±—ñ—á–Ω–∏–º–∏ –µ—Ñ–µ–∫—Ç–∞–º–∏ ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–æ–∂–µ:
//    –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
//   –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –ø–æ—Å–∏–ª–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø—É
//   –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–≤–µ–¥–µ–Ω–Ω—è-–≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–æ—â–æ
  
//    const dirtyMultiply = (array, value) => {
//     for (let i = 0; i < array.length; i += 1) {
//       array[i] = array[i] * value;
//     }
//   };
  
//   const numbers = [1, 2, 3, 4, 5];
//   dirtyMultiply(numbers, 2);
//   –í—ñ–¥–±—É–ª–∞—Å—è –º—É—Ç–∞—Ü—ñ—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö - –º–∞—Å–∏–≤—É numbers
//   console.log(numbers); // [2, 4, 6, 8, 10]
  
// –§—É–Ω–∫—Ü—ñ—è dirtyMultiply(array, value) –º–Ω–æ–∂–∏—Ç—å –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É array –Ω–∞ —á–∏—Å–ª–æ value. –í–æ–Ω–∞ –∑–º—ñ–Ω—é—î (–º—É—Ç—É—î) –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.
// –ß–∏—Å—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è(pure function) ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–∫–æ—ó –∑–∞–ª–µ–∂–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥ –∑–Ω–∞—á–µ–Ω—å –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.–ó–∞ —É–º–æ–≤–∏ –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –≤–æ–Ω–∞
// –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–¥–∏–Ω —ñ —Ç–æ–π —Å–∞–º–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ –Ω–µ –º–∞—î –ø–æ–±—ñ—á–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤, —Ç–æ–±—Ç–æ –Ω–µ –∑–º—ñ–Ω—é—î –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.
//   –ù–∞–ø–∏—à–µ–º–æ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é —á–∏—Å—Ç–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –º–Ω–æ–∂–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –Ω–µ –∑–º—ñ–Ω—é—é—á–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π.
  
//   const pureMultiply = (array, value) => {
//     const newArray = [];
  
//     array.forEach(element => {
//       newArray.push(element * value);
//     });
  
//     return newArray;
//   };
  
//   const numbers = [1, 2, 3, 4, 5];
//   const doubledNumbers = pureMultiply(numbers, 2);
  
  // –ú—É—Ç–∞—Ü—ñ—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö –Ω–µ –≤—ñ–¥–±—É–ª–∞—Å—è
//   console.log(numbers); // [1, 2, 3, 4, 5]
  // –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∑—ñ –∑–º—ñ–Ω–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
//   console.log(doubledNumbers); // [2, 4, 6, 8, 10]

// –¢–ï–°–¢:
// –í–∏–±–µ—Ä–∏ –≤—Å—ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–æ —á–∏—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

//* –Ω–µ –∑–º—ñ–Ω—é—é—Ç—å –∑–Ω–∞—á–µ–Ω—å –≤–∏—Ö—ñ–¥–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
// –∑–º—ñ–Ω—é—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
//* –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å –æ–¥–∏–Ω —ñ —Ç–æ–π —Å–∞–º–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
// –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å —Ä—ñ–∑–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
// Result

// –î–∞–≤–∞–π –∑–∞–ø–∞–º‚Äô—è—Ç–∞—î–º–æ: 1) —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–∏—Å—Ç–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ –∑–º—ñ–Ω—é—î –∑–Ω–∞—á–µ–Ω—å –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤;
// 2) –∑–∞ —É–º–æ–≤–∏ –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —á–∏—Å—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–¥–∏–Ω —ñ —Ç–æ–π —Å–∞–º–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç–æ–±—Ç–æ –≤–æ–Ω–∞ –Ω–µ –º–∞—î –ø–æ–±—ñ—á–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤

// –ó–∞–¥–∞—á–∞:
// he changeEven(numbers, value) function takes an array of numbers numbers and updates each element whose value is an even number by
// adding the value of the value parameter, which is exactly a number.

// Refactor the function so that it becomes clean ‚Äî it does not change the array of numbers numbers, but creates, fills and returns a new array with updated values.

// The changeEven(numbers, value) function is declared.
// The changeEven function does not change the value of the numbers parameter.
// Calling changeEven([1, 2, 3, 4, 5], 10) returns a new array [1, 12, 3, 14, 5].
// Calling changeEven([2, 8, 3, 7, 4, 6], 10) returns a new array [12, 18, 3, 7, 14, 16].
// Calling changeEven([17, 24, 68, 31, 42], 100) returns a new array [17, 124, 168, 31, 142].
// Calling changeEven([44, 13, 81, 92, 36, 54], 100) returns a new array [144, 13, 81, 192, 136, 154].
// Calling a function with random but valid arguments returns the correct value.

// function changeEven(numbers, value) {
// 	const newArray = [];
  
// 	numbers.forEach(number => {
// 	  if (number % 2 === 0) {
// 		newArray.push(number + value);
// 	  } else {
// 		newArray.push(number);
// 	  }
// 	});
  
// 	return newArray;
// }
// console.log(changeEven([1, 2, 3, 4, 5], 10)); // [1, 12, 3, 14, 5]
// console.log(changeEven([2, 8, 3, 7, 4, 6], 10)); // [12, 18, 3, 7, 14, 16]
// console.log(changeEven([17, 24, 68, 31, 42], 100)); // [17, 124, 168, 31, 142]
// console.log(changeEven([44, 13, 81, 92, 36, 54], 100)); // [144, 13, 81, 192, 136, 154]

//!  –ú–µ—Ç–æ–¥–∏ map —ñ flatMap

// ? –ß–∏—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –§—É–Ω–∫—Ü—ñ—è –∑ –ø–æ–±—ñ—á–Ω–∏–º–∏ –µ—Ñ–µ–∫—Ç–∞–º–∏ ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–æ–∂–µ:
// –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
// –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –ø–æ—Å–∏–ª–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø—É
// –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–≤–µ–¥–µ–Ω–Ω—è-–≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–æ—â–æ

// const dirtyMultiply = (array, value) => {
//   for (let i = 0; i < array.length; i += 1) {
//     array[i] = array[i] * value;
//   }
// };

// const numbers = [1, 2, 3, 4, 5];
// dirtyMultiply(numbers, 2);
// –í—ñ–¥–±—É–ª–∞—Å—è –º—É—Ç–∞—Ü—ñ—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö - –º–∞—Å–∏–≤—É numbers
// console.log(numbers); // [2, 4, 6, 8, 10]
// –§—É–Ω–∫—Ü—ñ—è dirtyMultiply(array, value) –º–Ω–æ–∂–∏—Ç—å –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É array –Ω–∞ —á–∏—Å–ª–æ value. –í–æ–Ω–∞ –∑–º—ñ–Ω—é—î (–º—É—Ç—É—î) –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.

// –ß–∏—Å—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è(pure function) ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–∫–æ—ó –∑–∞–ª–µ–∂–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥ –∑–Ω–∞—á–µ–Ω—å –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.–ó–∞ —É–º–æ–≤–∏ –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
// –≤–æ–Ω–∞ –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–¥–∏–Ω —ñ —Ç–æ–π —Å–∞–º–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ –Ω–µ –º–∞—î –ø–æ–±—ñ—á–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤, —Ç–æ–±—Ç–æ –Ω–µ –∑–º—ñ–Ω—é—î –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.
// –ù–∞–ø–∏—à–µ–º–æ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é —á–∏—Å—Ç–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –º–Ω–æ–∂–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –Ω–µ –∑–º—ñ–Ω—é—é—á–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π.

// const pureMultiply = (array, value) => {
//   const newArray = [];

//   array.forEach(element => {
//     newArray.push(element * value);
//   });

//   return newArray;
// };

// const numbers = [1, 2, 3, 4, 5];
// const doubledNumbers = pureMultiply(numbers, 2);

// –ú—É—Ç–∞—Ü—ñ—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö –Ω–µ –≤—ñ–¥–±—É–ª–∞—Å—è
// console.log(numbers); // [1, 2, 3, 4, 5]
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∑—ñ –∑–º—ñ–Ω–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
// console.log(doubledNumbers); // [2, 4, 6, 8, 10]

// –í–∏–±–µ—Ä–∏ –≤—Å—ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–æ —á–∏—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// * –Ω–µ –∑–º—ñ–Ω—é—é—Ç—å –∑–Ω–∞—á–µ–Ω—å –≤–∏—Ö—ñ–¥–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
// –∑–º—ñ–Ω—é—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
// * –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å –æ–¥–∏–Ω —ñ —Ç–æ–π —Å–∞–º–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
// –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å —Ä—ñ–∑–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
// Result

// –î–∞–≤–∞–π –∑–∞–ø–∞–º‚Äô—è—Ç–∞—î–º–æ: 1) —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–∏—Å—Ç–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ –∑–º—ñ–Ω—é—î –∑–Ω–∞—á–µ–Ω—å –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤; 2) –∑–∞ —É–º–æ–≤–∏
// –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —á–∏—Å—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–¥–∏–Ω —ñ —Ç–æ–π —Å–∞–º–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç–æ–±—Ç–æ –≤–æ–Ω–∞ –Ω–µ –º–∞—î –ø–æ–±—ñ—á–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤

// –ó–∞–¥–∞—á–∞:
// The changeEven(numbers, value) function takes an array of numbers numbers and updates each element whose value is an even number by adding the value of the value parameter, which is exactly a number.

// Refactor the function so that it becomes clean ‚Äî it does not change the array of numbers numbers, but creates, fills and returns a new array with updated values.

// The changeEven(numbers, value) function is declared.
// The changeEven function does not change the value of the numbers parameter.
// Calling changeEven([1, 2, 3, 4, 5], 10) returns a new array [1, 12, 3, 14, 5].
// Calling changeEven([2, 8, 3, 7, 4, 6], 10) returns a new array [12, 18, 3, 7, 14, 16].
// Calling changeEven([17, 24, 68, 31, 42], 100) returns a new array [17, 124, 168, 31, 142].
// Calling changeEven([44, 13, 81, 92, 36, 54], 100) returns a new array [144, 13, 81, 192, 136, 154].
// Calling a function with random but valid arguments returns the correct value.

// function changeEven(numbers, value) {
// 	const newArray = [];
  
// 	numbers.forEach(number => {
// 	  if (number % 2 === 0) {
// 		newArray.push(number + value);
// 	  } else {
// 		newArray.push(number);
// 	  }
// 	});
  
// 	return newArray;
// }
// console.log(changeEven([1, 2, 3, 4, 5], 10)); // [1, 12, 3, 14, 5]
// console.log(changeEven([2, 8, 3, 7, 4, 6], 10)); // [12, 18, 3, 7, 14, 16]
// console.log(changeEven([17, 24, 68, 31, 42], 100)); // [17, 124, 168, 31, 142]
// console.log(changeEven([44, 13, 81, 92, 36, 54], 100)); // [144, 13, 81, 192, 136, 154]

//?  –ü–µ—Ä–µ–±–∏—Ä–∞—é—á—ñ –º–µ—Ç–æ–¥–∏

// –£ JavaScript —î –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—ñ–≤, —è–∫—ñ –ø—Ä–∏–π—à–ª–∏ –∑ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –º–æ–≤.–ë—ñ–ª—å—à—ñ—Å—Ç—å —ñ–∑ –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –º–∞—Å–∏–≤—ñ–≤ ‚Äî —Ü–µ —á–∏—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó. 
// –í–æ–Ω–∏ —Å—Ç–≤–æ—Ä—é—é—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –∑–∞–ø–æ–≤–Ω—é—é—Ç—å –π–æ–≥–æ, –∑–∞—Å—Ç–æ—Å–æ–≤—É—é—á–∏ –¥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∑–Ω–∞—á–µ–Ω—É –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—é, –ø—ñ—Å–ª—è —á–æ–≥–æ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å —Ü–µ–π –Ω–æ–≤–∏–π –º–∞—Å–∏–≤.
// –£—Å—ñ –ø–µ—Ä–µ–±–∏—Ä–∞—é—á—ñ –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—ñ–≤ –º–∞—é—Ç—å —Å—Ö–æ–∂–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.–ù–∞ –≤–∏—Ö—ñ–¥–Ω–æ–º—É –º–∞—Å–∏–≤—ñ array –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–∏–π –º–µ—Ç–æ–¥ method, —É —è–∫–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è
// –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—è callback.

//   array.method(callback(currentValue, index, array))

// –£ –±—ñ–ª—å—à–æ—Å—Ç—ñ –º–µ—Ç–æ–¥—ñ–≤ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ —î —ó—Ö–Ω—ñ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º, –æ—Ç—Ä–∏–º—É—é—Ç—å —Ç—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:
// –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –±—É–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É currentValue
// –¥—Ä—É–≥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –±—É–¥–µ —ñ–Ω–¥–µ–∫—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É index
// —Ç—Ä–µ—Ç—ñ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –±—É–¥–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–º –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤ array

// array.method((item, idx, arr) => {
  // –ª–æ–≥—ñ–∫–∞, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –Ω–∞ –∫–æ–∂–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
// });

// –£—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –æ–∫—Ä—ñ–º –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É item, –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ. –ù–∞–∑–≤–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –±—É–¥—å-—è–∫—ñ, –≥–æ–ª–æ–≤–Ω–µ, —â–æ–± –≤–æ–Ω–∏ –±—É–ª–∏ –∑—Ä–æ–∑—É–º—ñ–ª—ñ 
// —Ç–æ–±—ñ —Ç–∞ —ñ–Ω—à–∏–º —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º.

// array.method(item => {
  // –ª–æ–≥—ñ–∫–∞, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –Ω–∞ –∫–æ–∂–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
// });

// –Ø–∫–∏–º –ø–æ –ø–æ—Ä—è–¥–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –±—É–¥–µ –≤ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó –ª—ñ—á–∏–ª—å–Ω–∏–∫ (—ñ–Ω–¥–µ–∫—Å) –ø–æ—Ç–æ—á–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó?

// –ü–µ—Ä—à–∏–º
//*  –î—Ä—É–≥–∏–º
// –¢—Ä–µ—Ç—ñ–º
// Result

// –°–∞–º–µ —Ç–∞–∫! –õ—ñ—á–∏–ª—å–Ω–∏–∫ –±—É–¥–µ —É –¥—Ä—É–≥–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ.

//!  –ú–µ—Ç–æ–¥ map()
// –ë—ñ–ª—å—à—ñ—Å—Ç—å –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –º–∞—Å–∏–≤—É ‚Äî —Ü–µ —á–∏—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.–í–æ–Ω–∏ —Å—Ç–≤–æ—Ä—é—é—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –∑–∞–ø–æ–≤–Ω—é—é—Ç—å –π–æ–≥–æ, –∑–∞—Å—Ç–æ—Å–æ–≤—É—é—á–∏ –¥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ 
// –µ–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∑–Ω–∞—á–µ–Ω—É –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—é, –ø—ñ—Å–ª—è —á–æ–≥–æ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å —Ü–µ–π –Ω–æ–≤–∏–π –º–∞—Å–∏–≤.

// –ú–µ—Ç–æ–¥ map(callback) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó –º–∞—Å–∏–≤—É.–í—ñ–Ω –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –º–∞—Å–∏–≤—É, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ó—ó 
// —Ä–æ–±–æ—Ç–∏ –∑–∞–ø–∏—Å—É—î –≤ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —è–∫–∏–π —ñ –±—É–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É.

// array.map((element, index, array) => {
  // –¢—ñ–ª–æ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// });

// –ü–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
// –ù–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ø–∏—Å—É—î—Ç—å—Å—è –≤ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤
// –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–∞–∫–æ—ó –∂ –¥–æ–≤–∂–∏–Ω–∏, —è–∫ —ñ –≤ –º–∞—Å–∏–≤—É, –¥–æ —è–∫–æ–≥–æ –≤—ñ–Ω –±—É–≤ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–π

// –ô–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ –µ—Ç–∞–ª–æ–Ω,
// –Ω–∞ –æ—Å–Ω–æ–≤—ñ —è–∫–æ–≥–æ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —ñ–Ω—à—É –∫–æ–ª–µ–∫—Ü—ñ—é.

// const planets = ["Earth", "Mars", "Venus", "Jupiter"];

// const planetsInUpperCase = planets.map(planet => planet.toUpperCase());
// console.log(planetsInUpperCase); // ["EARTH", "MARS", "VENUS", "JUPITER"]

// const planetsInLowerCase = planets.map(planet => planet.toLowerCase());
// console.log(planetsInLowerCase); // ["earth", "mars", "venus", "jupiter"]

// // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤ –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è
// console.log(planets); // ["Earth", "Mars", "Venus", "Jupiter"]

// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞–Ω–æ–Ω—ñ–º–Ω–∏—Ö —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –∑ –Ω–µ—è–≤–Ω–∏–º –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º —Å—É—Ç—Ç—î–≤–æ —Å–∫–æ—Ä–æ—á—É—î ¬´—à—É–º¬ª –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—ó, —â–æ —Ä–æ–±–∏—Ç—å –∫–æ–¥
// —á–∏—Å—Ç—ñ—à–∏–º —ñ –ø—Ä–æ—Å—Ç—ñ—à–∏–º –¥–ª—è —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è.

// –©–æ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç–æ–¥ map(callback)?

//* –ú–∞—Å–∏–≤
// –û–±‚Äô—î–∫—Ç
// –î–æ–≤—ñ–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
// Result

//*  –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–µ—Ç–æ–¥ map(callback) –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —â–æ –±—É–¥–µ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ä–æ–±–æ—Ç–∏ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –º–∞—Å–∏–≤—É.

// –ú–∞—Å–∏–≤ —è–∫–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç–æ–¥ map(callback)?

// –ù–∞ –æ–¥–∏–Ω–∏—Ü—é –º–µ–Ω—à–µ –∑–∞ –¥–æ–≤–∂–∏–Ω—É –º–∞—Å–∏–≤—É, –¥–æ —è–∫–æ–≥–æ –≤—ñ–Ω –±—É–≤ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–π
//* –ó–∞–≤–∂–¥–∏ —Ç–∞–∫–æ—ó —Å–∞–º–æ—ó, —è–∫ —ñ –≤ –º–∞—Å–∏–≤—É, –¥–æ —è–∫–æ–≥–æ –≤—ñ–Ω –±—É–≤ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–π
// –î–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏, –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞
// Result

//* –ê–±—Å–æ–ª—é—Ç–Ω–æ —Ç–æ—á–Ω–æ! –ú–µ—Ç–æ–¥ map(callback)–ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–∞–∫–æ—ó –∂ –¥–æ–≤–∂–∏–Ω–∏, —è–∫ —ñ –≤ –º–∞—Å–∏–≤—É, –¥–æ —è–∫–æ–≥–æ –≤—ñ–Ω –±—É–≤ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–π.

// –ú–µ—Ç–æ–¥ map –∑–º—ñ–Ω—é—î –º–∞—Å–∏–≤ –¥–æ —è–∫–æ–≥–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è?

// –¢–∞–∫
//*  –ù—ñ
// Result

//*  –ß—É–¥–æ–≤–æ! –ú–µ—Ç–æ–¥ map –Ω–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤.

  // –ó–∞–¥–∞—á–∞:
  // –ïhe planets array contains the names of the planets.Modify the code so that the variable planetsLengths will contain an array consisting of the lengths 
  // of the names of each planet in the planets array.Be sure to use the map() method.

  // The variable planets is declared.
  // The value of the planets variable is an array ["Earth", "Mars", "Venus", "Jupiter"].
  // The variable planetsLengths is declared.
  // The value of the variable planetsLengths is an array [5, 4, 5, 7].
  // The map() method is used to iterate over the array of planets.

// const planets = ["Earth", "Mars", "Venus", "Jupiter"];
  
// const planetsLengths = planets.map(planet => planet.length);
// console.log(planetsLengths); // [5, 4, 5, 7]

//? –ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤
// –ú–∏ –≤–∂–µ –∑–Ω–∞—î–º–æ, —â–æ —Ç–∏–ø–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî —Ü–µ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—è –º–∞—Å–∏–≤–æ–º –æ–±'—î–∫—Ç—ñ–≤. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Å–∏–≤ –∑–Ω–∞—á–µ–Ω—å –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∑ —É—Å—ñ—Ö –æ–±'—î–∫—Ç—ñ–≤. 
// –£ –Ω–∞—Å —î –º–∞—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, –∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–∫—Ä–µ–º–∏–π –º–∞—Å–∏–≤ —ó—Ö–Ω—ñ—Ö —ñ–º–µ–Ω.

// const students = [
//   { name: "Mango", score: 83 },
//   { name: "Poly", score: 59 },
//   { name: "Ajax", score: 37 },
//   { name: "Kiwi", score: 94 },
//   { name: "Houston", score: 64 },
// ];

// const names = students.map(student => student.name);
// console.log(names); // ["Mango", "Poly", "Ajax", "Kiwi", "Houston"]
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ map(), –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–±—Ä–∞—Ç–∏ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤, —ñ –≤ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∫–æ–∂–Ω–æ–≥–æ –∑ –Ω–∏—Ö.
// –ó–∞–¥–∞—á–∞:
// The books array contains a collection of book objects, each of which contains the title, author, rating properties.Using the map() method,
// make the variable titles contain an array of titles of all books(property title) from the array books.

// The variable books is declared.
// The value of the variable books is an array.
// The variable titles is declared.
// The value of the variable titles is an array ["The Last Kingdom", "Beside Still Waters", "The Fault in Our Stars", "Redder Than Blood", "Enemy of God"].
// To iterate over the books array, the map() method is used as a pure function.

// const books = [
//   {
//     title: "The Last Kingdom",
//     author: "Bernard Cornwell",
//     rating: 8.38,
//   },
//   {
//     title: "Beside Still Waters",
//     author: "Robert Sheckley",
//     rating: 8.51,
//   },
//   {
//     title: "The Dream of a Ridiculous Man",
//     author: "Fyodor Dostoevsky",
//     rating: 7.75,
//   },
//   { title: "Redder Than Blood", author: "Tanith Lee", rating: 7.94 },
//   { title: "Enemy of God", author: "Bernard Cornwell", rating: 8.67 },
// ];

// const titles = books.map(book => book.title);
// console.log(titles); // ["The Last Kingdom", "Beside Still Waters", "The Dream of a Rid

//!  –ú–µ—Ç–æ–¥ flatMap()
// –ú–µ—Ç–æ–¥ flatMap(callback) –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥—É map(), –∞–ª–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —É –≤–∏–ø–∞–¥–∫–∞—Ö, –∫–æ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —Ü–µ –±–∞–≥–∞—Ç–æ–≤–∏–º—ñ—Ä–Ω–∏–π –º–∞—Å–∏–≤, —è–∫–∏–π –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ ¬´—Ä–æ–∑–≥–ª–∞–¥–∏—Ç–∏¬ª.

// array.flatMap((element, index, array) => {
  // –¢—ñ–ª–æ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// });

// –£ –º–∞—Å–∏–≤—ñ students –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –∫–æ–ª–µ–∫—Ü—ñ—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑—ñ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç—ñ–≤, —è–∫—ñ –≤—ñ–¥–≤—ñ–¥—É—î —Å—Ç—É–¥–µ–Ω—Ç —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ courses.–ö—ñ–ª—å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –º–æ–∂—É—Ç—å –≤—ñ–¥–≤—ñ–¥—É–≤–∞—Ç–∏ 
// –æ–¥–∏–Ω —ñ —Ç–æ–π —Å–∞–º–∏–π –ø—Ä–µ–¥–º–µ—Ç.–ù–µ–æ–±—Ö—ñ–¥–Ω–æ —Å–∫–ª–∞—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤, —è–∫—ñ –≤—ñ–¥–≤—ñ–¥—É—î —Ü—è –≥—Ä—É–ø–∞ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, –ø–æ–∫–∏ —â–æ –Ω–∞–≤—ñ—Ç—å –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö.


// const students = [
//   { name: "Mango", courses: ["mathematics", "physics"] },
//   { name: "Poly", courses: ["science", "mathematics"] },
//   { name: "Kiwi", courses: ["physics", "biology"] },
// ];

// const mappedCourses = students.map(student => student.courses);
// console.log(mappedCourses) // [["mathematics", "physics"], ["science", "mathematics"], ["physics", "biology"]]

// const flattenedCourses = students.flatMap(student => student.courses);
// console.log(flattenedCourses) // ["mathematics", "physics", "science", "mathematics", "physics", "biology"];



// –ú–µ—Ç–æ–¥ flatMap –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –º–∞—Å–∏–≤—É, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ó—ó —Ä–æ–±–æ—Ç–∏ –∑–∞–ø–∏—Å—É—î –≤ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤.–í—ñ–¥–º—ñ–Ω–Ω—ñ—Å—Ç—å 
// –≤—ñ–¥ map() –ø–æ–ª—è–≥–∞—î –≤ —Ç–æ–º—É, —â–æ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ ¬´—Ä–æ–∑–≥–ª–∞–¥–∂—É—î—Ç—å—Å—è¬ª –Ω–∞ –≥–ª–∏–±–∏–Ω—É, —â–æ –¥–æ—Ä—ñ–≤–Ω—é—î –æ–¥–∏–Ω–∏—Ü—ñ(–æ–¥–Ω–∞ –≤–∫–ª–∞–¥–µ–Ω—ñ—Å—Ç—å).–¶–µ–π —Ä–æ–∑–≥–ª–∞–¥–∂–µ–Ω–∏–π(–ø–ª–æ—Å–∫–∏–π) –º–∞—Å–∏–≤ —ñ 
// —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–æ–±–æ—Ç–∏ flatMap().

// –ó–∞–¥–∞—á–∞:
// The books array contains a collection of book objects, each of which contains the genres property, whose value is an array of genres.Using the flatMap() method,
// make the variable genres contain an array of genres of all books(the genres property) from the books array.

// The variable books is declared.
// The value of the books variable is an array of objects.
// The variable genres is declared.
// The value of the genres variable is an array ["adventure", "history", "fiction", "horror", "mysticism"].
// To iterate over the books array, the flatMap() method is used.

// ["adventure", "history", "fiction", "horror", "mysticism"]
// 
// const books = [
//   {
//     title: "The Last Kingdom",
//     author: "Bernard Cornwell",
//     genres: ["adventure", "history"],
//   },
//   {
//     title: "Beside Still Waters",
//     author: "Robert Sheckley",
//     genres: ["fiction"],
//   },
//   {
//     title: "Redder Than Blood",
//     author: "Tanith Lee",
//     genres: ["horror", "mysticism"],
//   },
// ];

// const genres = books.flatMap(book => book.genres);
// console.log(genres);// ["adventure", "history", "fiction", "horror", "mysticism"]

// –ó–∞–¥–∞—á–∞:

// –ê —Ç–µ–ø–µ—Ä –¥–∞–≤–∞–π —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –∑–∞–¥–∞—á—É ¬´–ü–æ—à—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤¬ª ?

// We will pass this array of objects as the users parameter when calling the function from the task.
// const users =
// [
//   {
//     name: "Moore Hensley",
//     email: "moorehensley@indexia.com",
//     eyeColor: "blue",
//     friends: ["Sharron Pace"],
//     isActive: false,
//     balance: 2811,
//     skills: ["ipsum", "lorem"],
//     gender: "male",
//     age: 37,
//   },
//   {
//     name: "Sharlene Bush",
//     email: "sharlenebush@tubesys.com",
//     eyeColor: "blue",
//     friends: ["Briana Decker", "Sharron Pace"],
//     isActive: true,
//     balance: 3821,
//     skills: ["tempor", "mollit", "commodo", "veniam", "laborum"],
//     gender: "female",
//     age: 34,
//   },
//   {
//     name: "Ross Vazquez",
//     email: "rossvazquez@xinware.com",
//     eyeColor: "green",
//     friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
//     isActive: false,
//     balance: 3793,
//     skills: ["nulla", "anim", "proident", "ipsum", "elit"],
//     gender: "male",
//     age: 24,
//   },
//   {
//     name: "Elma Head",
//     email: "elmahead@omatom.com",
//     eyeColor: "green",
//     friends: ["Goldie Gentry", "Aisha Tran"],
//     isActive: true,
//     balance: 2278,
//     skills: ["adipisicing", "irure", "velit"],
//     gender: "female",
//     age: 21,
//   },
//   {
//     name: "Carey Barr",
//     email: "careybarr@nurali.com",
//     eyeColor: "blue",
//     friends: ["Jordan Sampson", "Eddie Strong"],
//     isActive: true,
//     balance: 3951,
//     skills: ["ex", "culpa", "nostrud"],
//     gender: "male",
//     age: 27,
//   },
//   {
//     name: "Blackburn Dotson",
//     email: "blackburndotson@furnigeer.com",
//     eyeColor: "brown",
//     friends: ["Jacklyn Lucas", "Linda Chapman"],
//     isActive: false,
//     balance: 1498,
//     skills: ["non", "amet", "ipsum"],
//     gender: "male",
//     age: 38,
//   },
//   {
//     name: "Sheree Anthony",
//     email: "shereeanthony@kog.com",
//     eyeColor: "brown",
//     friends: ["Goldie Gentry", "Briana Decker"],
//     isActive: true,
//     balance: 2764,
//     skills: ["lorem", "veniam", "culpa"],
//     gender: "female",
//     age: 39,
//   },
// ];

// Enhance the arrow function getUserEmails(users) so that it returns an array of user email addresses(the email property) from the array of objects in the users
// parameter.

// The variable getUserEmails has been declared.
// The variable getUserEmails has been assigned an arrow function with the parameter (users).
// The map() method is used to iterate over the users parameter.
// The function call with the specified array of users returns the array["moorehensley@indexia.com", "sharlenebush@tubesys.com", "rossvazquez@xinware.com",
//   "elmahead@omatom.com", "careybarr@nurali.com", "blackburndotson@furnigeer.com", "shereeanthony@kog.com"].

// const getUserEmails = users => users.map(user => user.email);


// Test the function with the provided array of user objects 
// console.log(getUserEmails(users));
// ["moorehensley@indexia.com", "sharlenebush@tubesys.com", "rossvazquez@xinware.com",
//  "elmahead@omatom.com", "careybarr@nurali.com", "blackburndotson@furnigeer.com",
//  "shereeanthony@kog.com"]

//!           –ú–µ—Ç–æ–¥–∏ filter —ñ find
//?       –ú–µ—Ç–æ–¥ filter()

// –ú–µ—Ç–æ–¥ filter(callback) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —î–¥–∏–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó ‚Äî —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –º–∞—Å–∏–≤—É.–ü—ñ–¥ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é –º–∞—Å–∏–≤—É –º–∞—î—Ç—å—Å—è –Ω–∞ —É–≤–∞–∑—ñ –≤—ñ–¥–±—ñ—Ä —É—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
// –∑–∞ –ø–µ–≤–Ω–∏–º –∫—Ä–∏—Ç–µ—Ä—ñ—î–º.

// array.filter((element, index, array) => {
  // –¢—ñ–ª–æ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// });

// –ù–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤.
// –ü–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤.
// –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤.
// –î–æ–¥–∞—î –≤ –º–∞—Å–∏–≤, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è, –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å —É–º–æ–≤—É –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó.
// –Ø–∫—â–æ –∫–æ–ª–±–µ–∫ –ø–æ–≤–µ—Ä–Ω—É–≤ true, –µ–ª–µ–º–µ–Ω—Ç –¥–æ–¥–∞—î—Ç—å—Å—è –≤ –º–∞—Å–∏–≤, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è.
// –Ø–∫—â–æ –∫–æ–ª–±–µ–∫ –ø–æ–≤–µ—Ä–Ω—É–≤ false, –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –¥–æ–¥–∞—î—Ç—å—Å—è –≤ –º–∞—Å–∏–≤, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è.
// –Ø–∫—â–æ –∂–æ–¥–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω–∏–≤ —É–º–æ–≤—É, –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤.

// const values = [51, -3, 27, 21, -68, 42, -37];

// const positiveValues = values.filter(value => value >= 0);
// console.log(positiveValues); // [51, 27, 21, 42]
// –¥–æ positiveValues –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É values, —è–∫—ñ –∑–∞–¥–æ–≤–æ–ª—å–Ω–∏–ª–∏ —É–º–æ–≤—É –∫–æ–ª–±–µ–∫–∞, —Ç–æ–±—Ç–æ –±—É–ª–∏ >= 0

// const negativeValues = values.filter(value => value < 0);
// console.log(negativeValues); // [-3, -68, -37]
// –¥–æ negativeValues –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É values, —è–∫—ñ –∑–∞–¥–æ–≤–æ–ª—å–Ω–∏–ª–∏ —É–º–æ–≤—É –∫–æ–ª–±–µ–∫–∞, —Ç–æ–±—Ç–æ –±—É–ª–∏ < 0

// const bigValues = values.filter(value => value > 1000);
// console.log(bigValues); // []
// –¥–æ bigValues –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É values, —è–∫—ñ –∑–∞–¥–æ–≤–æ–ª—å–Ω–∏–ª–∏ —É–º–æ–≤—É –∫–æ–ª–±–µ–∫–∞, —Ç–æ–±—Ç–æ –±—É–ª–∏ > 1000

// console.log(values); // [51, -3, 27, 21, -68, 42, -37]
// –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤ values –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è

// –û—Ç–∂–µ, –º–µ—Ç–æ–¥ filter –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –º–∞—Å–∏–≤—É.–Ø–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ó—ó –≤–∏–∫–æ–Ω–∞–Ω–Ω—è true, –ø–æ—Ç–æ—á–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–æ–¥–∞—î—Ç—å—Å—è –≤ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤.

// –©–æ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç–æ–¥ filter()?

// –û–±'—î–∫—Ç
//*  –ú–∞—Å–∏–≤
// –î–æ–≤—ñ–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
// Result

//* –¢–æ—á–Ω—ñ—Å—ñ–Ω—å–∫–æ —Ç–∞–∫! –ú–µ—Ç–æ–¥ filter() –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤.

// –ú–∞—Å–∏–≤ —è–∫–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç–æ–¥ filter()?

// –ó–∞–≤–∂–¥–∏ —Ç–∞–∫–æ—ó —Å–∞–º–æ—ó, —è–∫ —ñ –º–∞—Å–∏–≤, –¥–æ —è–∫–æ–≥–æ –≤—ñ–Ω –±—É–≤ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–π
//* –î–æ–≤—ñ–ª—å–Ω–æ—ó, –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —É–º–æ–≤–∏ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞ –æ–¥–∏–Ω–∏—Ü—é –º–µ–Ω—à–∏–π –∑–∞ –¥–æ–≤–∂–∏–Ω—É –º–∞—Å–∏–≤—É, –¥–æ —è–∫–æ–≥–æ –≤—ñ–Ω –±—É–≤ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏–π
// Result

//* –°–∞–º–µ —Ç–∞–∫! –ú–µ—Ç–æ–¥ filter() –¥–æ–¥–∞—î –≤ –º–∞—Å–∏–≤, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è, –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å —É–º–æ–≤—É –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—ó.–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ü–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∑–∞–≤–¥–∞–Ω–Ω—è
//  —ñ –º–æ–∂–µ –±—É—Ç–∏ –±—É–¥—å - —è–∫–æ—é.

// –ß–∏ –∑–º—ñ–Ω—é—î –º–µ—Ç–æ–¥ filter() –º–∞—Å–∏–≤, –¥–æ —è–∫–æ–≥–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è?

// –¢–∞–∫
// * –ù—ñ
// Result

// * –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–µ—Ç–æ–¥ filter() –Ω–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤, –∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤.

// –ó–∞–¥–∞—á–∞:

// Complete the code so that the variable evenNumbers contains an array of even numbers from the array numbers, while the variable oddNumbers contains an array of odd numbers. Be sure to use the filter() method.

// The variable numbers is declared.
// The value of the numbers variable is an array [17, 24, 82, 61, 36, 18, 47, 52, 73].
// The variable evenNumbers is declared.
// The value of the variable evenNumbers is the array [24, 82, 36, 18, 52].
// The variable oddNumbers is declared.
// The value of the variable oddNumbers is the array [17, 61, 47, 73].
// The filter() method is used to iterate over the numbers array.

// const numbers = [17, 24, 82, 61, 36, 18, 47, 52, 73];

// const evenNumbers = numbers.filter(number => number % 2 === 0);
// const oddNumbers = numbers.filter(number => number % 2 !== 0);

// console.log(evenNumbers);
// console.log(oddNumbers);

// ?   –ú–µ—Ç–æ–¥ filter() –Ω–∞ –º–∞—Å–∏–≤—ñ –æ–±'—î–∫—Ç—ñ–≤

// –ü—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –∑ –º–∞—Å–∏–≤–æ–º –æ–±'—î–∫—Ç—ñ–≤ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º –ø–µ–≤–Ω–æ—ó –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ. –£ –ø—ñ–¥—Å—É–º–∫—É —É—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤.
// –†–æ–∑–≥–ª—è–Ω—å–º–æ –ø—Ä–∏–∫–ª–∞–¥, –¥–µ —î –º–∞—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ –±–∞–ª–∞–º–∏ –∑–∞ —Ç–µ—Å—Ç. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, —è–∫—ñ –º–∞—é—Ç—å:
// –≤–∏—Å–æ–∫—ñ –±–∞–ª–∏ (–≤—ñ–¥ 80 (–≤–∫–ª—é—á–Ω–æ)),
// –Ω–∏–∑—å–∫—ñ –±–∞–ª–∏ (–Ω–∏–∂—á–µ 50),
// —Å–µ—Ä–µ–¥–Ω—ñ –±–∞–ª–∏ (–≤—ñ–¥ 50 (–≤–∫–ª—é—á–Ω–æ) –¥–æ 80).

// const LOW_SCORE = 50;
// const HIGH_SCORE = 80;
// const students = [
//   { name: "Mango", score: 83 },
//   { name: "Poly", score: 59 },
//   { name: "Ajax", score: 37 },
//   { name: "Kiwi", score: 94 },
//   { name: "Houston", score: 64 },
// ];

// const best = students.filter(student => student.score >= HIGH_SCORE);
// console.log(best); // –ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑ —ñ–º–µ–Ω–∞–º–∏ Mango —ñ Kiwi

// const worst = students.filter(student => student.score < LOW_SCORE);
// console.log(worst); // –ú–∞—Å–∏–≤ –∑ –æ–¥–Ω–∏–º –æ–±'—î–∫—Ç–æ–º Ajax

// const average = students.filter(
//   (student) => student.score >= LOW_SCORE && student.score < HIGH_SCORE
// );
// console.log(average); // –ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑ —ñ–º–µ–Ω–∞–º–∏ Poly —ñ Houston

// –£ –ø—Ä–∏–∫–ª–∞–¥—ñ –≤–∏—â–µ –º–µ—Ç–æ–¥ filter() —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —ñ–∑ —Ç–∏–º–∏ –æ–±'—î–∫—Ç–∞–º–∏ –∑ –º–∞—Å–∏–≤—É students, —è–∫—ñ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å —É–º–æ–≤–∏, –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ 
// score.–£–º–æ–≤–∏ –≤–∏–∑–Ω–∞—á–∞—é—Ç—å—Å—è –≤ –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫–∞ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —É filter() —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.
// –£ –∑–º—ñ–Ω–Ω—É best –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –æ–±'—î–∫—Ç–∏, –≤ —è–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ score –±—ñ–ª—å—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—îHIGH_SCORE. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑ —ñ–º–µ–Ω–∞–º–∏ "Mango" —ñ "Kiwi".
// –£ –∑–º—ñ–Ω–Ω—É worst ‚Äî –æ–±‚Äô—î–∫—Ç–∏, –≤ —è–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ score –º–µ–Ω—à–µ LOW_SCORE. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ –º–∞—Å–∏–≤ –∑ –æ–¥–Ω–∏–º –æ–±'—î–∫—Ç–æ–º –∑ —ñ–º–µ–Ω–µ–º "Ajax".
// –£ –∑–º—ñ–Ω–Ω—É average ‚Äî –æ–±'—î–∫—Ç–∏, –≤ —è–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ score –±—ñ–ª—å—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î LOW_SCORE —ñ –º–µ–Ω—à–µ HIGH_SCORE. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑ —ñ–º–µ–Ω–∞–º–∏
// "Poly" —ñ "Houston".

// –ó–∞–¥–∞—á–∞:

// The array books contains a collection of book objects, each of which has the properties title, author, and rating. Using the filter() method, modify the code so that:

// The variable topRatedBooks becomes an array of books whose rating (the rating property) is greater than or equal to the value of the variable MIN_RATING.
// The variable booksByAuthor becomes an array of books written by an author with the name (the author property) that matches the value in the variable AUTHOR.
// The variable books has been declared.
// The value of the variable books is an array of objects.
// The variable MIN_RATING has been declared.
// The value of the variable MIN_RATING is the number 8.
// The variable AUTHOR has been declared.
// The value of the variable AUTHOR is the string "Bernard Cornwell".
// The variable topRatedBooks has been declared.
// The value of the variable topRatedBooks is an array of books with a rating higher than 8.
// The variable booksByAuthor has been declared.
// The value of the variable booksByAuthor is an array of books whose author is "Bernard Cornwell".
// The filter() method has been used to iterate over the books array

// const books = [
//   {
//     title: "The Last Kingdom",
//     author: "Bernard Cornwell",
//     rating: 8.38,
//   },
//   {
//     title: "Beside Still Waters",
//     author: "Robert Sheckley",
//     rating: 8.51,
//   },
//   {
//     title: "The Dream of a Ridiculous Man",
//     author: "Fyodor Dostoevsky",
//     rating: 7.75,
//   },
//   { title: "Redder Than Blood", author: "Tanith Lee", rating: 7.94 },
//   { title: "Enemy of God", author: "Bernard Cornwell", rating: 8.67 },
// ];

// const MIN_RATING = 8;
// const AUTHOR = "Bernard Cornwell";

// const topRatedBooks = books.filter(book => book.rating >= MIN_RATING);
// const booksByAuthor = books.filter(book => book.author === AUTHOR);
// console.log(topRatedBooks); // –ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑ –∫–Ω–∏–≥–∞–º–∏ –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤–∏—â–µ 8
// console.log(booksByAuthor); // –ú–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑ –∫–Ω–∏–≥–∞–º–∏ –∞–≤—Ç–æ—Ä–∞ "Bernard Cornwell"

// –ó–∞–¥–∞—á–∞:

// –ê —Ç–µ–ø–µ—Ä –¥–∞–≤–∞–π —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –∑–∞–¥–∞—á—É ¬´–ü–æ—à—É–∫ –∑–∞ –∫–æ–ª—å–æ—Ä–æ–º –æ—á–µ–π¬ª ?
// We will pass this array of objects to the users parameter when calling the function from the task.
  
// const users =
// [
//   {
//     name: "Moore Hensley",
//     email: "moorehensley@indexia.com",
//     eyeColor: "blue",
//     friends: ["Sharron Pace"],
//     isActive: false,
//     balance: 2811,
//     gender: "male"
//   },
//   {
//     name: "Sharlene Bush",
//     email: "sharlenebush@tubesys.com",
//     eyeColor: "blue",
//     friends: ["Briana Decker", "Sharron Pace"],
//     isActive: true,
//     balance: 3821,
//     gender: "female"
//   },
//   {
//     name: "Ross Vazquez",
//     email: "rossvazquez@xinware.com",
//     eyeColor: "green",
//     friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
//     isActive: false,
//     balance: 3793,
//     gender: "male"
//   },
//   {
//     name: "Elma Head",
//     email: "elmahead@omatom.com",
//     eyeColor: "green",
//     friends: ["Goldie Gentry", "Aisha Tran"],
//     isActive: true,
//     balance: 2278,
//     gender: "female"
//   },
//   {
//     name: "Carey Barr",
//     email: "careybarr@nurali.com",
//     eyeColor: "blue",
//     friends: ["Jordan Sampson", "Eddie Strong"],
//     isActive: true,
//     balance: 3951,
//     gender: "male"
//   },
//   {
//     name: "Blackburn Dotson",
//     email: "blackburndotson@furnigeer.com",
//     eyeColor: "brown",
//     friends: ["Jacklyn Lucas", "Linda Chapman"],
//     isActive: false,
//     balance: 1498,
//     gender: "male"
//   },
//   {
//     name: "Sheree Anthony",
//     email: "shereeanthony@kog.com",
//     eyeColor: "brown",
//     friends: ["Goldie Gentry", "Briana Decker"],
//     isActive: true,
//     balance: 2764,
//     gender: "female"
//   }
// ]
// Enhance the getUsersWithEyeColour(users, colour) function so that it returns an array of users whose eye colour (eyeColour property) matches
// the value of the second colour parameter.

// The variable getUsersWithEyeColor is declared.
// The variable getUsersWithEyeColor is assigned an arrow function with parameters(users, colour).

// const getUsersWithEyeColor = (users, color) => {
//   return users.filter(user => user.eyeColor === color);
// };
// console.log(getUsersWithEyeColor(users, "blue")); // [ { name: 'Moore Hensley', email: '

// –ó–∞–¥–∞—á–∞:

// –ê —Ç–µ–ø–µ—Ä –¥–∞–≤–∞–π —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –∑–∞–¥–∞—á—É ?
// We will pass this array of objects to the users parameter when calling the function from the task.

// const users =
// [
//   {
//     name: "Moore Hensley",
//     email: "moorehensley@indexia.com",
//     eyeColor: "blue",
//     friends: ["Sharron Pace"],
//     isActive: false,
//     balance: 2811,
//     gender: "male",
//     age: 37
//   },
//   {
//     name: "Sharlene Bush",
//     email: "sharlenebush@tubesys.com",
//     eyeColor: "blue",
//     friends: ["Briana Decker", "Sharron Pace"],
//     isActive: true,
//     balance: 3821,
//     gender: "female",
//     age: 34
//   },
//   {
//     name: "Ross Vazquez",
//     email: "rossvazquez@xinware.com",
//     eyeColor: "green",
//     friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
//     isActive: false,
//     balance: 3793,
//     gender: "male",
//     age: 24
//   },
//   {
//     name: "Elma Head",
//     email: "elmahead@omatom.com",
//     eyeColor: "green",
//     friends: ["Goldie Gentry", "Aisha Tran"],
//     isActive: true,
//     balance: 2278,
//     gender: "female",
//     age: 21
//   },
//   {
//     name: "Carey Barr",
//     email: "careybarr@nurali.com",
//     eyeColor: "blue",
//     friends: ["Jordan Sampson", "Eddie Strong"],
//     isActive: true,
//     balance: 3951,
//     gender: "male",
//     age: 27
//   },
//   {
//     name: "Blackburn Dotson",
//     email: "blackburndotson@furnigeer.com",
//     eyeColor: "brown",
//     friends: ["Jacklyn Lucas", "Linda Chapman"],
//     isActive: false,
//     balance: 1498,
//     gender: "male",
//     age: 38
//   },
//   {
//     name: "Sheree Anthony",
//     email: "shereeanthony@kog.com",
//     eyeColor: "brown",
//     friends: ["Goldie Gentry", "Briana Decker"],
//     isActive: true,
//     balance: 2764,
//     gender: "female",
//     age: 39
//   }
// ]
// Enhance the code of the function getUsersWithAge(users, minAge, maxAge) to return an array of users whose age(stored in the age property) falls within
// the specified range from minAge to maxAge.

// Tips:

// Use the filter() method to create a new array that contains only the elements that meet a specific condition.
// Use the operators >= (greater than or equal to) and <= (less than or equal to) to filter users whose age falls within the range between the minimum value of minAge
// and the maximum value of maxAge.
// The variable getUsersWithAge has been declared.
// An arrow function with parameters (users, minAge, maxAge) has been assigned to the variable getUsersWithAge.
// The filter() method is used to iterate over the users parameter.
// If the values of the parameters minAge and maxAge are 20 and 30 respectively, the function returns an array of user objects with the names Ross Vazquez, Elma Head, and Carey Barr.
// If the values of the parameters minAge and maxAge are 30 and 40 respectively, the function returns an array of user objects with the names Moore Hensley, Sharlene Bush, Blackburn Dotson, and Sheree Anthony.
// If the values of the parameters minAge and maxAge are 80 and 100 respectively, the function returns an empty array.
// Calling the function with random but valid arguments returns the correct value.

// const getUsersWithAge = (users, minAge, maxAge) => {
//   return users.filter(user => user.age >= minAge && user.age <= maxAge);
// }
// console.log(getUsersWithAge(users, 20, 30)); // [ { name: 'Ross Vazquez', email: '
// console.log(getUsersWithAge(users, 30, 40)); // [ { name: 'Moore Hensley', email: '
// console.log(getUsersWithAge(users, 80, 100)); // []
// console.log(getUsersWithAge(users, 20, 30)); // [ { name: 'Ross Vazquez', email: '

// ? –ú–µ—Ç–æ–¥ find()

// –¢–∏ –≤–∂–µ –∑–Ω–∞—î—à, —â–æ –º–µ—Ç–æ–¥ filter(callback) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–æ—à—É–∫—É –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —â–æ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å —É–º–æ–≤—É.
// –ú–µ—Ç–æ–¥ find(callback) –¥–æ–∑–≤–æ–ª—è—î –∑–Ω–∞–π—Ç–∏ —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–µ—Ä—à–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç, —â–æ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É, –ø—ñ—Å–ª—è —á–æ–≥–æ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è –º–∞—Å–∏–≤—É –ø—Ä–∏–ø–∏–Ω—è—î—Ç—å—Å—è.
// –¢–æ–±—Ç–æ –≤—ñ–Ω, –Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ –º–µ—Ç–æ–¥—É filter(callback), —à—É–∫–∞—î –¥–æ –ø–µ—Ä—à–æ–≥–æ –∑–±—ñ–≥—É.

// array.find((element, index, array) => {
//   // –¢—ñ–ª–æ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// });

// –ù–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
// –ü–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
// –ü–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç, —â–æ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É, —Ç–æ–±—Ç–æ –∫–æ–ª–∏ –∫–æ–ª–±–µ–∫ –ø–æ–≤–µ—Ä—Ç–∞—î true
// –Ø–∫—â–æ –∂–æ–¥–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω–∏–≤ —É–º–æ–≤—É, —Ç–æ–±—Ç–æ –¥–ª—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∫–æ–ª–±–µ–∫ –ø–æ–≤–µ—Ä–Ω—É–≤ false, –º–µ—Ç–æ–¥ –ø–æ–≤–µ—Ä—Ç–∞—î undefined


// –ú–µ—Ç–æ–¥ find() –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –ø–æ—à—É–∫—É –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞, —è–∫–∏–π –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É.–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –ø–æ—à—Ç–æ—é,
// –∞–≤—Ç–æ–º–æ–±—ñ–ª—è ‚Äî –∑–∞ —Å–µ—Ä—ñ–π–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º, –∫–Ω–∏–≥–∏ ‚Äî –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–æ—â–æ.

// const colorPickerOptions = [
//   { label: "red", color: "#F44336" },
//   { label: "green", color: "#4CAF50" },
//   { label: "blue", color: "#2196F3" },
//   { label: "pink", color: "#E91E63" },
//   { label: "indigo", color: "#3F51B5" },
// ];

// colorPickerOptions.find((option) => option.label === "blue"); // { label: "blue", color: "#2196F3" }
// colorPickerOptions.find((option) => option.label === "pink"); // { label: "pink", color: "#E91E63" }
// colorPickerOptions.find((option) => option.label === "white"); // undefined


// –©–æ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç–æ–¥ find()?

// –ú–∞—Å–∏–≤
// –û–±'—î–∫—Ç
//* –ï–ª–µ–º–µ–Ω—Ç, —è–∫–∏–π —à—É–∫–∞—î–º–æ
// Result

//*  –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å! –ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ –º–µ—Ç–æ–¥—É filter(callback), —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –º–µ—Ç–æ–¥ find() –ø–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç, —â–æ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î –∫—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É.

// –©–æ –ø–æ–≤–µ—Ä–Ω–µ –º–µ—Ç–æ–¥ find(), —è–∫—â–æ –∂–æ–¥–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ–π –ø–æ—à—É–∫—É?

//* undefined
// null
// []
// false
// Result

//* –¢–∏ –¥—É–∂–µ —É–≤–∞–∂–Ω–∏–π/-–∞! –Ø–∫—â–æ –∂–æ–¥–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω–∏–≤ —É–º–æ–≤—É, —Ç–æ–±—Ç–æ –¥–ª—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∫–æ–ª–±–µ–∫ –ø–æ–≤–µ—Ä–Ω—É–≤ false, –º–µ—Ç–æ–¥ find() –ø–æ–≤–µ—Ä—Ç–∞—î undefined.

// –ß–∏ –∑–º—ñ–Ω—é—î –º–µ—Ç–æ–¥ find –º–∞—Å–∏–≤, –¥–æ —è–∫–æ–≥–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è?

// –¢–∞–∫
// * –ù—ñ
// Result

//* –ê–±—Å–æ–ª—é—Ç–Ω–æ —Ç–æ—á–Ω–æ! –ú–µ—Ç–æ–¥ find –Ω–µ –∑–º—ñ–Ω—é—î –º–∞—Å–∏–≤ –¥–æ —è–∫–æ–≥–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è, —Ç–∞–∫ —Å–∞–º–æ —è–∫ —ñ –º–µ—Ç–æ–¥ filter(callback)

// –ó–∞–¥–∞—á–∞:
// The array books contains a collection of book objects, each of which has properties title, author, and rating.

// Using the find() method, complete the code so that:

// The variable bookWithTitle becomes an object of the book whose title (the title property) matches the value of the variable BOOK_TITLE.
// The variable bookByAuthor becomes an object of the book whose author (the author property) matches the value of the variable AUTHOR.
// The variable books is declared.
// The value of the variable books is an array.
// The variable BOOK_TITLE is declared.
// The value of the variable BOOK_TITLE is the string "The Fault in Our Stars".
// The variable AUTHOR is declared.
// The value of the variable AUTHOR is the string "Robert Sheckley".
// The variable bookWithTitle is declared.
// The value of the variable bookWithTitle is the object of the book with the title "The Fault in Our Stars".
// The variable bookByAuthor is declared.
// The value of the variable bookByAuthor is the object of the book by the author "Robert Sheckley".
// The find() method is used to iterate over the array books.

// const books = [
//   {
//     title: "The Last Kingdom",
//     author: "Bernard Cornwell",
//     rating: 8.38,
//   },
//   {
//     title: "Beside Still Waters",
//     author: "Robert Sheckley",
//     rating: 8.51,
//   },
//   {
//     title: "The Dream of a Ridiculous Man",
//     author: "Fyodor Dostoevsky",
//     rating: 7.75,
//   },
//   { title: "Redder Than Blood", author: "Tanith Lee", rating: 7.94 },
// ];
// const BOOK_TITLE = "The Dream of a Ridiculous Man";
// const AUTHOR = "Robert Sheckley";

// const bookWithTitle = books.find(book => book.title === BOOK_TITLE);
// const bookByAuthor = books.find(book => book.author === AUTHOR);

// console.log(bookWithTitle); // { title: "The Dream of a Rid
// console.log(bookByAuthor); // { title: "Beside Still Waters", author: "Robert Sheckley", rating: 8.51 }

// –ó–∞–¥–∞—á–∞:
// –ê —Ç–µ–ø–µ—Ä –¥–∞–≤–∞–π —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –∑–∞–¥–∞—á—É ?
// We will pass this array of objects to the users parameter when calling the function from the task.

// const users =
// [
//   {
//     name: "Moore Hensley",
//     email: "moorehensley@indexia.com",
//     eyeColor: "blue",
//     friends: ["Sharron Pace"],
//     isActive: false,
//     balance: 2811,
//     gender: "male"
//   },
//   {
//     name: "Sharlene Bush",
//     email: "sharlenebush@tubesys.com",
//     eyeColor: "blue",
//     friends: ["Briana Decker", "Sharron Pace"],
//     isActive: true,
//     balance: 3821,
//     gender: "female"
//   },
//   {
//     name: "Ross Vazquez",
//     email: "rossvazquez@xinware.com",
//     eyeColor: "green",
//     friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
//     isActive: false,
//     balance: 3793,
//     gender: "male"
//   },
//   {
//     name: "Elma Head",
//     email: "elmahead@omatom.com",
//     eyeColor: "green",
//     friends: ["Goldie Gentry", "Aisha Tran"],
//     isActive: true,
//     balance: 2278,
//     gender: "female"
//   },
//   {
//     name: "Carey Barr",
//     email: "careybarr@nurali.com",
//     eyeColor: "blue",
//     friends: ["Jordan Sampson", "Eddie Strong"],
//     isActive: true,
//     balance: 3951,
//     gender: "male"
//   },
//   {
//     name: "Blackburn Dotson",
//     email: "blackburndotson@furnigeer.com",
//     eyeColor: "brown",
//     friends: ["Jacklyn Lucas", "Linda Chapman"],
//     isActive: false,
//     balance: 1498,
//     gender: "male"
//   },
//   {
//     name: "Sheree Anthony",
//     email: "shereeanthony@kog.com",
//     eyeColor: "brown",
//     friends: ["Goldie Gentry", "Briana Decker"],
//     isActive: true,
//     balance: 2764,
//     gender: "female"
//   }
// ]
// Extend the getUserWithEmail(users, email) function so that it returns a user object whose email (property email) matches the value of the second parameter email.

// The function getUserWithEmail is declared.
// The variable getUserWithEmail is assigned an arrow function with parameters (users, email).
// The find() method is used to iterate over the users parameter.
// If the value of the email parameter is "shereeanthony@kog.com", the function returns the user object with the name Sheree Anthony.
// If the value of the email parameter is "elmahead@omatom.com", the function returns the user object with the name Elma Head.
// If the value of the email parameter is "blackburndotson@furnigeer.com", the function returns the user object with the name Blackburn Dotson.
// If there is no user in the users array with the email from the email parameter, the function returns undefined.
// Calling the function with random, but valid, arguments returns the correct value.

// const getUserWithEmail = (users, email) => {
//   return users.find(user => user.email === email);
// };

// console.log(getUserWithEmail(users, "shereeanthony@kog.com"));
// { name: "Sheree Anthony", email: "shereeanthony@kog.com", ... }
// { name: 'Sheree Anthony', email: '
 
//!   –ú–µ—Ç–æ–¥–∏ every, some —ñ reduce

// ? –ú–µ—Ç–æ–¥ every()

// –ú–µ—Ç–æ–¥ every(callback) –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å —É—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —É–º–æ–≤—É –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó.

// array.every((element, index, array) => {
  // –¢—ñ–ª–æ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// });

//*  –ù–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
//*  –ü–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
//*  –ü–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å —É–º–æ–≤—É
//*  –ü–æ–≤–µ—Ä—Ç–∞—î false, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É
//*  –ü–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è –º–∞—Å–∏–≤—É –ø—Ä–∏–ø–∏–Ω—è—î—Ç—å—Å—è, —è–∫—â–æ –∫–æ–ª–±–µ–∫ –ø–æ–≤–µ—Ä—Ç–∞—î false


// –£—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –±—ñ–ª—å—à—ñ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—é—Ç—å –Ω—É–ª—é? - —Ç–∞–∫
// [1, 2, 3, 4, 5].every((value) => value >= 0); // true

// –£—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –±—ñ–ª—å—à—ñ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—é—Ç—å –Ω—É–ª—é? - –Ω—ñ
// [1, 2, 3, -10, 4, 5].every((value) => value >= 0); // false

// –ü—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –∑ –º–∞—Å–∏–≤–æ–º –æ–±'—î–∫—Ç—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–æ—ó—Å—å —ó—Ö–Ω—å–æ—ó –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–∏ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤, –º–∏ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏,
// —á–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.
// const products = [
// 	{ name: "apple", quantity: 2 },
// 	{ name: "orange", quantity: 5 },
// 	{ name: "plum", quantity: 0 },
// ];

// const hasEveryProduct = products.every(product => product.quantity > 0);
// console.log(hasEveryProduct); // false


// –©–æ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç–æ–¥ every()?

//* true, —è–∫—â–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å —É–º–æ–≤—É, —ñ false, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É
// false, —è–∫—â–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å —É–º–æ–≤—É, —ñ true, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É
// Result

//* –¢–∞–∫, —É—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–µ—Ç–æ–¥ every() –ø–æ–≤–µ—Ä—Ç–∞—î true, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å —É–º–æ–≤—É, —ñ false, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É —Ü—å–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç—å.

// –ß–∏ –∑–º—ñ–Ω—é—î –º–µ—Ç–æ–¥ every –º–∞—Å–∏–≤, –¥–æ —è–∫–æ–≥–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è?

// –¢–∞–∫
//* –ù—ñ
// Result

//* –Ü —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å! –ú–µ—Ç–æ–¥ every(callback) –Ω–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤.

//todo     –ó–∞–¥–∞—á–∞:

// We will pass this array of objects to the users parameter when calling the function from the task.
  
// const users =
// [
//   {
//     name: "Moore Hensley",
//     email: "moorehensley@indexia.com",
//     eyeColor: "blue",
//     friends: ["Sharron Pace"],
//     isActive: false,
//     balance: 2811,
//     gender: "male"
//   },
//   {
//     name: "Sharlene Bush",
//     email: "sharlenebush@tubesys.com",
//     eyeColor: "blue",
//     friends: ["Briana Decker", "Sharron Pace"],
//     isActive: true,
//     balance: 3821,
//     gender: "female"
//   },
//   {
//     name: "Ross Vazquez",
//     email: "rossvazquez@xinware.com",
//     eyeColor: "green",
//     friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
//     isActive: false,
//     balance: 3793,
//     gender: "male"
//   },
//   {
//     name: "Elma Head",
//     email: "elmahead@omatom.com",
//     eyeColor: "green",
//     friends: ["Goldie Gentry", "Aisha Tran"],
//     isActive: true,
//     balance: 2278,
//     gender: "female"
//   },
//   {
//     name: "Carey Barr",
//     email: "careybarr@nurali.com",
//     eyeColor: "blue",
//     friends: ["Jordan Sampson", "Eddie Strong"],
//     isActive: true,
//     balance: 3951,
//     gender: "male"
//   },
//   {
//     name: "Blackburn Dotson",
//     email: "blackburndotson@furnigeer.com",
//     eyeColor: "brown",
//     friends: ["Jacklyn Lucas", "Linda Chapman"],
//     isActive: false,
//     balance: 1498,
//     gender: "male"
//   },
//   {
//     name: "Sheree Anthony",
//     email: "shereeanthony@kog.com",
//     eyeColor: "brown",
//     friends: ["Goldie Gentry", "Briana Decker"],
//     isActive: true,
//     balance: 2764,
//     gender: "female"
//   }
// ]
// Extend the isEveryUserActive(users) function so that it checks whether all users are currently active (the isActive property) and returns either true or false.

// The variable isEveryUserActive is declared.
// An arrow function with the (users) parameter is assigned to the isEveryUserActive variable.
// To iterate over the users parameter, the every() method is used.
// Calling the function with the specified array of users returns false.

// const isEveryUserActive = (users) => {
//   return users.every(user => user.isActive);
// };

// console.log(isEveryUserActive(users)); // false

//?    –ú–µ—Ç–æ–¥ some()

// –ú–µ—Ç–æ–¥ some(callback) –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç —É–º–æ–≤—É –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó.

// array.some((element, index, array) => {
  // –¢—ñ–ª–æ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// });

// –ù–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
// –ü–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
// –ü–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É
// –ü–æ–≤–µ—Ä—Ç–∞—î false, —è–∫—â–æ –∂–æ–¥–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É
// –ü–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è –º–∞—Å–∏–≤—É –ø—Ä–∏–ø–∏–Ω—è—î—Ç—å—Å—è, —è–∫—â–æ –∫–æ–ª–±–µ–∫ –ø–æ–≤–µ—Ä—Ç–∞—î true

// –ß–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç, —â–æ –±—ñ–ª—å—à–∏–π –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é? - —Ç–∞–∫
//* [1, 2, 3, 4, 5].some(value => value >= 0); // true

// –ß–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç, —â–æ –±—ñ–ª—å—à–∏–π –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é? - —Ç–∞–∫
//* [-7, -20, 3, -10, -14].some(value => value >= 0); // true

// –ß–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç, —â–æ –º–µ–Ω—à–∏–π –≤—ñ–¥ –Ω—É–ª—è? - –Ω—ñ
//* [1, 2, 3, 4, 5].some(value => value < 0); // false

// –ß–∏ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç, —â–æ –º–µ–Ω—à–∏–π –≤—ñ–¥ –Ω—É–ª—è? - —Ç–∞–∫
//* [1, 2, 3, -10, 4, 5].some(value => value < 0); // true


// –ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É –Ω–∞ –≤—ñ–¥–º—ñ–Ω–Ω—ñ—Å—Ç—å –º—ñ–∂ –º–µ—Ç–æ–¥–æ–º every —Ç–∞ –º–µ—Ç–æ–¥–æ–º some: –ú–µ—Ç–æ–¥ every() –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å —É—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —É–º–æ–≤—É –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—ó. 
// –ú–µ—Ç–æ–¥ some() –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç —É–º–æ–≤—É –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—ó.

// –©–æ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç–æ–¥ some() ?

//* true, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É, —Ç–∞ false, —è–∫—â–æ –∂–æ–¥–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É
// true, —è–∫—â–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å —É–º–æ–≤—É, —ñ false, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É
// Result

//* –ß—É–¥–æ–≤–æ! –¢–∏ –¥—É–∂–µ —É–≤–∞–∂–Ω–∏–π/-–∞! –ú–µ—Ç–æ–¥ some() –¥—ñ–π—Å–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É, —Ç–∞ false, —è–∫—â–æ –∂–æ–¥–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É –Ω–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î —É–º–æ–≤—É

// –ß–∏ –∑–º—ñ–Ω—é—î –º–µ—Ç–æ–¥ some() –º–∞—Å–∏–≤, –¥–æ —è–∫–æ–≥–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è?

// –¢–∞–∫
//*  –ù—ñ
// Result

//* –¶–µ –ª–µ–≥–∫–æ, —á–∏ –Ω–µ —Ç–∞–∫? –Ø–∫ —ñ –º–µ—Ç–æ–¥–∏, —Ä–æ–∑–≥–ª—è–Ω—É—Ç—ñ —Ä–∞–Ω—ñ—à–µ, –º–µ—Ç–æ–¥ some() –Ω–µ –∑–º—ñ–Ω—é—î –º–∞—Å–∏–≤, –¥–æ —è–∫–æ–≥–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è.

//todo     –ó–∞–¥–∞—á–∞:
// We will pass this array of objects to the users parameter when calling the function from the task.
// const users =
// [
//   {
//     name: "Moore Hensley",
//     email: "moorehensley@indexia.com",
//     eyeColor: "blue",
//     friends: ["Sharron Pace"],
//     isActive: false,
//     balance: 2811,
//     gender: "male"
//   },
//   {
//     name: "Sharlene Bush",
//     email: "sharlenebush@tubesys.com",
//     eyeColor: "blue",
//     friends: ["Briana Decker", "Sharron Pace"],
//     isActive: true,
//     balance: 3821,
//     gender: "female"
//   },
//   {
//     name: "Ross Vazquez",
//     email: "rossvazquez@xinware.com",
//     eyeColor: "green",
//     friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
//     isActive: false,
//     balance: 3793,
//     gender: "male"
//   },
//   {
//     name: "Elma Head",
//     email: "elmahead@omatom.com",
//     eyeColor: "green",
//     friends: ["Goldie Gentry", "Aisha Tran"],
//     isActive: true,
//     balance: 2278,
//     gender: "female"
//   },
//   {
//     name: "Carey Barr",
//     email: "careybarr@nurali.com",
//     eyeColor: "blue",
//     friends: ["Jordan Sampson", "Eddie Strong"],
//     isActive: true,
//     balance: 3951,
//     gender: "male"
//   },
//   {
//     name: "Blackburn Dotson",
//     email: "blackburndotson@furnigeer.com",
//     eyeColor: "brown",
//     friends: ["Jacklyn Lucas", "Linda Chapman"],
//     isActive: false,
//     balance: 1498,
//     gender: "male"
//   },
//   {
//     name: "Sheree Anthony",
//     email: "shereeanthony@kog.com",
//     eyeColor: "brown",
//     friends: ["Goldie Gentry", "Briana Decker"],
//     isActive: true,
//     balance: 2764,
//     gender: "female"
//   }
// ]
// Enhance the isAnyUserActive(users) function so that it checks for at least one active user (the isActive property) and returns either true or false.

// The isAnyUserActive function is declared.
// The isAnyUserActive variable is assigned an arrow function with the (users) parameter.
// To iterate over the users parameter, the some() method is used.
// Calling the function with the specified array of users returns true.

// const isAnyUserActive = (users) => {
//   return users.some(user => user.isActive);
// };
// console.log(isAnyUserActive(users)); // true

//?    –ú–µ—Ç–æ–¥ reduce()

// –ú–µ—Ç–æ–¥ reduce(callback, initialValue) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É —ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –ø—Ä–æ–º—ñ–∂–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. 
// –¢—Ä–æ—Ö–∏ —Å–∫–ª–∞–¥–Ω—ñ—à–∏–π –∑–∞ —ñ–Ω—à—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∑–∞—Å–≤–æ—î–Ω–Ω—è, –∞–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—Ä—Ç–∏–π —Ç–æ–≥–æ.

  // array.reduce((previousValue, element, index, array) => {
  // –¢—ñ–ª–æ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// }, initialValue);


//*  –ù–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
//*  –ü–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
//*  –ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å–µ, —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ (–æ–±‚Äô—î–∫—Ç, –º–∞—Å–∏–≤, —Ä—è–¥–æ–∫, —á–∏—Å–ª–æ —Ç–æ—â–æ)
//*  –ú–æ–∂–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±—É–¥—å-—è–∫–æ–≥–æ —ñ–Ω—à–æ–≥–æ –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–æ–≥–æ –º–µ—Ç–æ–¥—É –º–∞—Å–∏–≤—É —Ç–∞ –Ω–∞–≤—ñ—Ç—å —ó—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é

// –ú–µ—Ç–æ–¥ reduce() –æ—á—ñ–∫—É—î 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:

// 1-–π –ø–∞—Ä–∞–º–µ—Ç—Ä (–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π) ‚Äî –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ "–æ–ø—Ä–∞—Ü—å–æ–≤—É—î" –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É;
// 2-–π –ø–∞—Ä–∞–º–µ—Ç—Ä (–Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π) ‚Äî initialValue –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞.

// –ö–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–µ–¥—å—é—Å–∞ –æ—á—ñ–∫—É—î –≤ —Å–≤–æ—é —á–µ—Ä–≥—É —á–æ—Ç–∏—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.–¶—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —Ç–∞–∫ —Å–∞–º–æ —è–∫ —ñ –≤ –∫–æ–ª–±–µ–∫–∞—Ö —ñ–Ω—à–∏—Ö –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –º–∞—Å–∏–≤—É,
// –º–æ–∂–Ω–∞ –Ω–µ –æ–≥–æ–ª–æ—à—É–≤–∞—Ç–∏, —è–∫—â–æ –≤–æ–Ω–∏ –≤–∞–º –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ, –∞–ª–µ –Ω–µ –º–æ–∂–Ω–∞ –ø–æ—Ä—É—à—É–≤–∞—Ç–∏ —ó—Ö –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å:

// 1 - –π –ø–∞—Ä–∞–º–µ—Ç—Ä(previousValue) ‚Äî —Ü–µ –∞–∫—É–º—É–ª—è—Ç–æ—Ä, —Ç–æ–±—Ç–æ –ø—Ä–æ–º—ñ–∂–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.–ó–Ω–∞—á–µ–Ω–Ω—è, —è–∫–µ –ø–æ–≤–µ—Ä–Ω–µ –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó, –±—É–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è–º 
// —Ü—å–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó;
// 2-–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî –ø–æ—Ç–æ—á–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É;
// 3-–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî —ñ–Ω–¥–µ–∫—Å –ø–æ—Ç–æ—á–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó;
// 4-–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤.

// –ù–∞–π–ª–µ–≥—à–µ —É—è–≤–∏—Ç–∏ –π–æ–≥–æ —Ä–æ–±–æ—Ç—É –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Å—É–º–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É.

// const total = [2, 7, 3].reduce((previousValue, number) => {
//   return previousValue + number;
// }, 0);

// console.log(total); // 12

// –†–æ–∑–≥–ª—è–Ω—å–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ —Ä–æ–±–æ—Ç—É —Ä–µ–¥—å—é—Å–∞ —É –ø—Ä–∏–∫–ª–∞–¥—ñ –≤–∏—â–µ:

// –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞ 0
// –ø–µ—Ä—à–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó 0 + 2 –ø–æ–≤–µ—Ä–Ω–µ 2
// –¥—Ä—É–≥–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó 2 + 7 –ø–æ–≤–µ—Ä–Ω–µ 9
// —Ç—Ä–µ—Ç—è —ñ—Ç–µ—Ä–∞—Ü—ñ—è –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó 9 + 3 –ø–æ–≤–µ—Ä–Ω–µ 12

// –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–æ–¥—É –≤–∏—â–µ –±—É–¥–µ 12.

// –¢–æ–±—Ç–æ –º–µ—Ç–æ–¥ reduce() –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –∫–æ–ª–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∑—è—Ç–∏ ¬´–±–∞–≥–∞—Ç–æ¬ª —ñ –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–æ ¬´–æ–¥–Ω–æ–≥–æ¬ª. –£ –ø–æ–≤—Å—è–∫–¥–µ–Ω–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω–Ω—è—Ö –π–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–≤–æ–¥–∏—Ç—å—Å—è –¥–æ —Ä–æ–±–æ—Ç–∏ –∑ —á–∏—Å–ª–∞–º–∏.

// –©–æ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç–æ–¥ reduce()?

// –¢—ñ–ª—å–∫–∏ –º–∞—Å–∏–≤
// –¢—ñ–ª—å–∫–∏ –æ–±‚Äô—î–∫—Ç
//*  –ë—É–¥—å-—è–∫–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
// Result

//*  –¢–æ—á–Ω–æ! –ú–µ—Ç–æ–¥ reduce() –ø–æ–≤–µ—Ä—Ç–∞—î –±—É–¥—å-—è–∫–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.

// –ß–∏ –∑–º—ñ–Ω—é—î –º–µ—Ç–æ–¥ reduce() –º–∞—Å–∏–≤, –¥–æ —è–∫–æ–≥–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è?

// –¢–∞–∫
//* –ù—ñ
// Result

//* –°–∞–º–µ —Ç–∞–∫! –ú–µ—Ç–æ–¥ reduce() –ø–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤, –∞–ª–µ –Ω–µ –∑–º—ñ–Ω—é—î –π–æ–≥–æ.

//todo     –ó–∞–¥–∞—á–∞:

// The gaming service requires functionality to calculate the average time spent in games by a single player.
// The players variable stores an object where the key is the player's name and the value is their playing time.
// The playtimes variable stores an array of values from the players object, meaning an array of playing times for all players.
// The value of the averagePlayTime variable will be the average time spent by a single player in games.

// Complete the code so that the totalPlayTime variable holds the total playing time from the playtimes array. Use the reduce() method.

// The variable players is declared.
// The value of the players variable is an object of players with each player's playing time.
// The variable playtimes is declared.
// The value of the playtimes variable is the array [1270, 468, 710, 244].
// The variable totalPlayTime is declared.
// The value of the totalPlayTime variable is the number 2692.
// The reduce() method is used to iterate over the playtimes array.
// The variable averagePlayTime is declared.

// const players = {
//   mango: 1270,
//   poly: 468,
//   ajax: 710,
//   kiwi: 244,
// };
// const playtimes = Object.values(players); // [1270, 468, 710, 244]

// const totalPlayTime = playtimes.reduce((acc, time) => acc + time, 0);

// const averagePlayTime = totalPlayTime / playtimes.length;
// console.log(totalPlayTime); // 2692
// console.log(averagePlayTime); // 673

//! –ù–æ—Ç–∞—Ç–∫–∏:
// –í —Ü—å–æ–º—É –∫–æ–¥—ñ `Object.values(players)` –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Å–∏–≤—É –∑–Ω–∞—á–µ–Ω—å –∑ –æ–±'—î–∫—Ç–∞ `players`.

// –û–±'—î–∫—Ç `players` –º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á—ñ (—ñ–º–µ–Ω–∞ –≥—Ä–∞–≤—Ü—ñ–≤) —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (—á–∞—Å –≥—Ä–∏). `Object.values()` - —Ü–µ –≤–±—É–¥–æ–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥ –≤ JavaScript, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∑–Ω–∞—á–µ–Ω—å –≤—Å—ñ—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –æ–±'—î–∫—Ç–∞.
// –û—Å—å —â–æ –≤—ñ–Ω —Ä–æ–±–∏—Ç—å —É —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É:
// ```js
// const playtimes = Object.values(players); // [1270, 468, 710, 244]
// ```
// –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –≤—ñ–Ω –±–µ—Ä–µ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (`1270`, `468`, `710`, `244`) —ñ —Ñ–æ—Ä–º—É—î –º–∞—Å–∏–≤. –°–∞–º `Object` - —Ü–µ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç JavaScript,
// —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –æ–±'—î–∫—Ç–∞–º–∏, –≤–∫–ª—é—á–∞—é—á–∏ `Object.values()`.

//?  –ú–µ—Ç–æ–¥ reduce() —ñ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤

// –ü—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –∑ –º–∞—Å–∏–≤–æ–º –æ–±'—î–∫—Ç—ñ–≤ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ä–µ–¥—É–∫—É–≤–∞–Ω–Ω—è –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º –ø–µ–≤–Ω–æ—ó –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —É –Ω–∞—Å —î –º–∞—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ –±–∞–ª–∞–º–∏ –∑–∞ —Ç–µ—Å—Ç. 
// –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª.

// const students = [
//   { name: "Mango", score: 83 },
//   { name: "Poly", score: 59 },
//   { name: "Ajax", score: 37 },
//   { name: "Kiwi", score: 94 },
//   { name: "Houston", score: 64 },
// ];

// –ù–∞–∑–≤–∞ –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—ñ–ª—å–Ω–æ—é, —Ü–µ –ø—Ä–æ—Å—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ—É–Ω–∫—Ü—ñ—ó
// const totalScore = students.reduce((total, student) => {
//   return total + student.score;
// }, 0);

// const averageScore = totalScore / students.length;

// console.log(totalScore); // 337
// console.log(averageScore); // 67.4

// –£ –ø—Ä–∏–∫–ª–∞–¥—ñ –≤–∏—â–µ –º–µ—Ç–æ–¥ reduce() –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—É–º–∏ –∑–Ω–∞—á–µ–Ω—å –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ score –¥–ª—è –≤—Å—ñ—Ö –æ–±'—î–∫—Ç—ñ–≤ –º–∞—Å–∏–≤—É students.
// –ü–æ—á–∏–Ω–∞—é—á–∏ –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è 0, –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—á–∏—Å–ª—é—î —Å—É–º—É –∑–Ω–∞—á–µ–Ω—å –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ score –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞ –º–∞—Å–∏–≤—É students. 
// –†–µ–∑—É–ª—å—Ç–∞—Ç(—Å—É–º–∞) –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π totalScore.
// const averageScore –æ–±—á–∏—Å–ª—é—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è score –¥–ª—è –≤—Å—ñ—Ö –æ–±'—î–∫—Ç—ñ–≤ –º–∞—Å–∏–≤—É students, —à–ª—è—Ö–æ–º –¥—ñ–ª–µ–Ω–Ω—è —Å—É–º–∏ –≤—Å—ñ—Ö –±–∞–ª—ñ–≤ –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.

//todo  –ó–∞–¥–∞—á–∞:

// In the variable players, there is an array of objects, each of which has the properties name, playtime, and gamesPlayed.

// Our service needs to calculate the average time spent in a single game for each player and obtain the total sum of these time values in the variable totalAveragePlaytimePerGame. The time for each player can be calculated by dividing their time (the playtime property) by the number of games (the gamesPlayed property).

// Tips:

// Use the reduce() method to iterate over the players array and compute the total sum of the average time per game.
// Inside the callback function of reduce(), divide the player's playtime by gamesPlayed to obtain the average time spent on a single game by each player.
// Accumulate the result in the variable acc and return it at the end of each iteration.
// Initialize the acc parameter of the reduce() method with an initial value of 0 to avoid getting NaN during calculations.
// As a result, the variable totalAveragePlaytimePerGame will contain the total sum of the average time per game for all players.
// The variable players is declared.
// The value of the players variable is an array of player objects.
// The variable totalAveragePlaytimePerGame is declared.
// The value of the variable totalAveragePlaytimePerGame is the number 1023.
// To iterate over the players array, the reduce() method is used.

// const players = [
//   { name: "Mango", playtime: 1270, gamesPlayed: 4 },
//   { name: "Poly", playtime: 469, gamesPlayed: 2 },
//   { name: "Ajax", playtime: 690, gamesPlayed: 3 },
//   { name: "Kiwi", playtime: 241, gamesPlayed: 1 },
// ];

// const totalAveragePlaytimePerGame = players.reduce((acc, player) => {
//   return acc + player.playtime / player.gamesPlayed;
// }, 0);
// console.log(totalAveragePlaytimePerGame); // 1023
//! –ù–æ—Ç–∞—Ç–∫–∏:
// –£ —Ü—å–æ–º—É –∫–æ–¥—ñ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ `reduce()` –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É, –ø—Ä–æ–≤–µ–¥–µ–Ω–æ–≥–æ –≤ –≥—Ä—ñ, –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è.
// –ú–µ—Ç–æ–¥ `reduce()` –ø–µ—Ä–µ–±–∏—Ä–∞—î –º–∞—Å–∏–≤ `players`, –¥–µ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —î –æ–±'—î–∫—Ç–æ–º –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ `name`, `playtime` —Ç–∞ `gamesPlayed`.
// –ù–∞ –∫–æ–∂–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó –º–∏ –¥—ñ–ª–∏–º–æ `playtime` –Ω–∞ `gamesPlayed`, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–π –≤ –≥—Ä—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è, —ñ –¥–æ–¥–∞—î–º–æ —Ü–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞ `acc`.
// –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É, `reduce()` –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É, –ø—Ä–æ–≤–µ–¥–µ–Ω–æ–≥–æ –≤ –≥—Ä—ñ –¥–ª—è –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ –∑–º—ñ–Ω–Ω—ñ–π `totalAveragePlaytimePerGame`. 
// –¶–µ –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–º –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É, –ø—Ä–æ–≤–µ–¥–µ–Ω–æ–≥–æ –≤ –≥—Ä—ñ –¥–ª—è –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤ —É –º–∞—Å–∏–≤—ñ `players`.

// todo   –ó–∞–¥–∞—á–∞:
// We will pass this array of objects to the users parameter when calling the function from the task.
//  const users =
// [
//   {
//     name: "Moore Hensley",
//     email: "moorehensley@indexia.com",
//     eyeColor: "blue",
//     friends: ["Sharron Pace"],
//     isActive: false,
//     balance: 2811,
//     gender: "male"
//   },
//   {
//     name: "Sharlene Bush",
//     email: "sharlenebush@tubesys.com",
//     eyeColor: "blue",
//     friends: ["Briana Decker", "Sharron Pace"],
//     isActive: true,
//     balance: 3821,
//     gender: "female"
//   },
//   {
//     name: "Ross Vazquez",
//     email: "rossvazquez@xinware.com",
//     eyeColor: "green",
//     friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
//     isActive: false,
//     balance: 3793,
//     gender: "male"
//   },
//   {
//     name: "Elma Head",
//     email: "elmahead@omatom.com",
//     eyeColor: "green",
//     friends: ["Goldie Gentry", "Aisha Tran"],
//     isActive: true,
//     balance: 2278,
//     gender: "female"
//   },
//   {
//     name: "Carey Barr",
//     email: "careybarr@nurali.com",
//     eyeColor: "blue",
//     friends: ["Jordan Sampson", "Eddie Strong"],
//     isActive: true,
//     balance: 3951,
//     gender: "male"
//   },
//   {
//     name: "Blackburn Dotson",
//     email: "blackburndotson@furnigeer.com",
//     eyeColor: "brown",
//     friends: ["Jacklyn Lucas", "Linda Chapman"],
//     isActive: false,
//     balance: 1498,
//     gender: "male"
//   },
//   {
//     name: "Sheree Anthony",
//     email: "shereeanthony@kog.com",
//     eyeColor: "brown",
//     friends: ["Goldie Gentry", "Briana Decker"],
//     isActive: true,
//     balance: 2764,
//     gender: "female"
//   }
// ]
// Enhance the calculateTotalBalance(users) function so that it calculates and returns the sum of all funds(property balance) 
// that are stored by users from the users array.

// The variable calculateTotalBalance is declared.
// The calculateTotalBalance variable is assigned an arrow function with the (users) parameter.
// To iterate over the users parameter, the reduce() method is used.
// Calling the function with the specified array of users returns the number 20916.

// const calculateTotalBalance = (users) => {
//   return users.reduce((total, user) => total + user.balance, 0);
// };

// console.log(calculateTotalBalance(users)); // 20916
// //! –ù–æ—Ç–∞—Ç–∫–∏:
// –£ —Ü—å–æ–º—É –∫–æ–¥—ñ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ `reduce()` –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –±–∞–ª–∞–Ω—Å—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
// –ú–µ—Ç–æ–¥ `reduce()` –ø–µ—Ä–µ–±–∏—Ä–∞—î –º–∞—Å–∏–≤ `users`, –¥–µ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —î –æ–±'—î–∫—Ç–æ–º –∑ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—é `balance`.
// –ù–∞ –∫–æ–∂–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó –º–∏ –¥–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è `balance` –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞ `total`.
// –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É, `reduce()` –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –±–∞–ª–∞–Ω—Å—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ –∑–º—ñ–Ω–Ω—ñ–π `calculateTotalBalance`.
// –¶–µ –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–º –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –º–∞—Å–∏–≤—ñ `users`.

//!    –ú–µ—Ç–æ–¥ toSorted
//?  –ú–µ—Ç–æ–¥ toSorted()

// –ú–µ—Ç–æ–¥ toSorted() —Å–æ—Ä—Ç—É—î –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É.

//   array.toSorted();

// –°–æ—Ä—Ç—É—î –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤
// –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤
// –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Å–æ—Ä—Ç—É—î –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º

//*  –ú–∞—Å–∏–≤ —á–∏—Å–µ–ª

// –†–æ–∑–≥–ª—è–Ω—å–º–æ –ø—Ä–∏–∫–ª–∞–¥, –¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –º–∞—Å–∏–≤ scores.
// –í–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤ scores –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º. –ù–æ–≤–∏–π –º–∞—Å–∏–≤ ascendingScores –º—ñ—Å—Ç–∏—Ç—å –º–∞—Å–∏–≤ —á–∏—Å–µ–ª, —â–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º.

// const scores = [61, 19, 74, 35, 92, 56];
// const ascendingScores = scores.toSorted();

// console.log(scores); // [61, 19, 74, 35, 92, 56]
// console.log(ascendingScores); // [19, 35, 56, 61, 74, 92]

// –û—Å–∫—ñ–ª—å–∫–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–µ—Ä–µ–¥ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º –º–µ—Ç–æ–¥ toSorted() –ø—Ä–∏–≤–æ–¥–∏—Ç—å —É—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –¥–æ —Ä—è–¥–∫—ñ–≤, —Ç–æ —Ñ–∞–∫—Ç–∏—á–Ω–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —Å–æ—Ä—Ç—É—é—Ç—å—Å—è —è–∫ —Ä—è–¥–∫–∏,
// —Ç–æ–±—Ç–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ó—Ö–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å —É —Ç–∞–±–ª–∏—Ü—ñ Unicode.–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª –≤–∏–≥–ª—è–¥–∞—î –Ω–µ–∑–≤–∏—á–Ω–æ, –∫–æ–ª–∏ –º–∏ –¥—É–º–∞—î–º–æ –ø—Ä–æ —á–∏—Å–ª–∞, –∞–ª–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ, —è–∫—â–æ –∑–Ω–∞—Ç–∏,
// —â–æ —á–∏—Å–ª–∞ –±—É–ª–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω—ñ –Ω–∞ —Ä—è–¥–∫–∏.

// const scores = [27, 2, 41, 4, 7, 3, 75];

// console.log(scores.toSorted()); // [2, 27, 3, 4, 41, 7, 75]

// –ü—Ä–∏ —Ç–∞–∫–æ–º—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—ñ —Ä—è–¥–∫–∏ –ø–æ—Ä—ñ–≤–Ω—é—é—Ç—å—Å—è –∑–∞ —Å–∏–º–≤–æ–ª–∞–º–∏ –∑–ª—ñ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, —Ç–æ–±—Ç–æ —Å–ø–æ—á–∞—Ç–∫—É –ø–æ—Ä—ñ–≤–Ω—é—é—Ç—å—Å—è —Ä—è–¥–∫–∏ 2 —ñ 27. –ü–µ—Ä—à–∏–π —Å–∏–º–≤–æ–ª 2 —É –Ω–∏—Ö –æ–¥–Ω–∞–∫–æ–≤–∏–π,
// –∞–ª–µ —Ä—è–¥–æ–∫ 2 –º—ñ—Å—Ç–∏—Ç—å –ª–∏—à–µ 1 —Å–∏–º–≤–æ–ª, —Ç–æ–º—É –≤—ñ–Ω –º–µ–Ω—à–∏–π, –Ω—ñ–∂ —Ä—è–¥–æ–∫ 27, —ñ –π–¥–µ –ø–µ—Ä—à–∏–º.
// –ü–æ—Ç—ñ–º –ø–æ—Ä—ñ–≤–Ω—é—é—Ç—å—Å—è —Ä—è–¥–∫–∏ 27 —ñ 3. –ü–µ—Ä—à–∏–π —Å–∏–º–≤–æ–ª —É —Ä—è–¥–∫—É 3 –±—ñ–ª—å—à–∏–π –∑–∞ –ø–µ—Ä—à–∏–π —Å–∏–º–≤–æ–ª 2 —É —Ä—è–¥–∫—É 27, —Ç–æ–º—É 3 –π–¥–µ –ø—ñ—Å–ª—è 27.

//*  –°–ø–æ—Å–æ–±–∏ –∑–∞–¥–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ.

//?   –ú–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤

// –ú–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ —Å–æ—Ä—Ç—É—î—Ç—å—Å—è –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º.

// const students = ["Jacob", "Artemis", "Solomon", "Adrian", "Kai", "Ganymede"];

// console.log(students.toSorted()); // [ "Adrian", "Artemis", "Ganymede", "Jacob", "Kai", "Solomon" ]

// –í–æ–¥–Ω–æ—á–∞—Å –ø–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä –≤–µ–ª–∏–∫–∏—Ö –ª—ñ—Ç–µ—Ä –º–µ–Ω—à–∏–π, –Ω—ñ–∂ —É –º–∞–ª–∏—Ö.

// const letters = ["b", "B", "a", "A", "c", "C"];

// console.log(letters.toSorted()); // ["A", "B", "C", "a", "b", "c"]

// –©–æ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç–æ–¥ toSorted()?

// –û–±‚Äô—î–∫—Ç
//* –ú–∞—Å–∏–≤
// –î–æ–≤—ñ–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
// Result

//* –Ü —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å! –ú–µ—Ç–æ–¥ toSorted() –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤.

// –ß–∏ –∑–º—ñ–Ω—é—î –º–µ—Ç–æ–¥ toSorted() –º–∞—Å–∏–≤, –¥–æ —è–∫–æ–≥–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è?

// –¢–∞–∫
//* –ù—ñ
// Result

//* –°–∞–º–µ —Ç–∞–∫! –ú–µ—Ç–æ–¥ toSorted() –Ω–µ –∑–º—ñ–Ω—é—î –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤.

//todo     –ó–∞–¥–∞—á–∞:

// –ïhe variable releaseDates is an array of numbers representing the years of publication of books.
// The variable authors is an array of strings representing the authors of the books.

// Complete the code in such a way that the variable ascendingReleaseDates becomes a copy of the releaseDates array sorted in ascending order, 
// while the variable alphabeticalAuthors becomes a copy of the authors array sorted in alphabetical order.Use the toSorted() method.

// The variable releaseDates is declared.
// The value of the releaseDates variable is an array [2016, 1967, 2008, 1984, 1973, 2012, 1997].
// The variable authors is declared.
// The value of the authors variable is an array ["Tanith Lee", "Bernard Cornwell", "Robert Sheckley", "John Green"].
// The variable ascendingReleaseDates is declared.
// The value of the ascendingReleaseDates variable is an array [1967, 1973, 1984, 1997, 2008, 2012, 2016].
// The variable alphabeticalAuthors is declared.
// The value of the alphabeticalAuthors variable is an array ["Bernard Cornwell", "John Green", "Robert Sheckley", "Tanith Lee"].
// The toSorted() method was used.

// const releaseDates = [2016, 1967, 2008, 1984, 1973, 2012, 1997];
// const authors = [
//   "Tanith Lee",
//   "Bernard Cornwell",
//   "Robert Sheckley",
//   "Fyodor Dostoevsky",
// ];

// const ascendingReleaseDates = releaseDates.toSorted();

// const alphabeticalAuthors = authors.toSorted();

// console.log(ascendingReleaseDates); // [1967, 1973, 1984, 1997, 2008, 2012, 2016]
// console.log(alphabeticalAuthors); // ["Bernard Cornwell", "Fyodor Dostoevsky", "Robert Sheckley", "Tanith Lee"]

//?  –°–≤—ñ–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª

// –î–ª—è –∑–∞–∑–Ω–∞—á–µ–Ω–Ω—è —Å–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É toSorted(compareFunction) –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é –∑ –¥–≤–æ–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
// –¶–µ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è (compare function), –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —ó—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. –ú–µ—Ç–æ–¥ toSorted() –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —ó—ó –¥–ª—è –¥–≤–æ—Ö –¥–æ–≤—ñ–ª—å–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.

// array.toSorted((a, b) => {
  // Callback function body
// });
// –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó compareFunction(a, b):
// a ‚Äî –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.
// b ‚Äî –¥—Ä—É–≥–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.
// –ü–æ–≤–µ—Ä—Ç–∞—î:
// 0, —è–∫—â–æ a —ñ b —Ä—ñ–≤–Ω—ñ;
//* –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º

// –Ø–∫—â–æ –≤–∏–∫–ª–∏–∫ compareFunction(a, b) –ø–æ–≤–µ—Ä—Ç–∞—î –±—É–¥—å-—è–∫–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —Ç–æ–±—Ç–æ a –º–µ–Ω—à–µ b, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å a –ø–µ—Ä–µ–¥ b.

// const scores = [61, 19, 74, 35, 92, 56];
// const ascendingScores = scores.toSorted((a, b) => a - b);
// console.log(ascendingScores); // [19, 35, 56, 61, 74, 92]

//* –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º

// –Ø–∫—â–æ –≤–∏–∫–ª–∏–∫ compareFunction(a, b) –ø–æ–≤–µ—Ä—Ç–∞—î –±—É–¥—å-—è–∫–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —Ç–æ–±—Ç–æ b –±—ñ–ª—å—à–µ a, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å b –ø–µ—Ä–µ–¥ a.

// const scores = [61, 19, 74, 35, 92, 56];
// const descendingScores = scores.toSorted((a, b) => b - a);
// console.log(descendingScores); // [92, 74, 61, 56, 35, 19]


// –Ø–∫—â–æ –≤–∏–∫–ª–∏–∫ compareFunction(a, b) –ø–æ–≤–µ—Ä–Ω–µ 0, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ª–∏—à–∏—Ç—å a —ñ b –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏ –ø–æ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—é –æ–¥–∏–Ω –¥–æ –æ–¥–Ω–æ–≥–æ, –∞–ª–µ –≤—ñ–¥—Å–æ—Ä—Ç—É—î —ó—Ö –ø–æ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—é –¥–æ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
// const scores = [61, 19, 74, 35, 92, 56];
// const sameScores = scores.toSorted((a, b) => { 
//   if (a === b) {
//     return 0;
//   }
//   return a - b;  
// });
// console.log(sameScores); // [19, 35, 56, 61, 74, 92]

//* –©–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏, —è–∫ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ —î —Ä—ñ–≤–Ω–∏–º–∏, –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–∞ —Å–≤–æ—ó—Ö –ø–æ–∑–∏—Ü—ñ—è—Ö –æ–¥–∏–Ω –≤—ñ–¥–Ω–æ—Å–Ω–æ –æ–¥–Ω–æ–≥–æ, –¥–∞–≤–∞–π –¥–æ–¥–∞–º–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ –º–∞—Å–∏–≤—É:

//* const scores = [61, 19, 74, 35, 92, 56, 35];

//* const sameScores = scores.toSorted((a, b) => { 
//*  if (a === b) {
//*     return 0; // –Ø–∫—â–æ —á–∏—Å–ª–∞ —Ä—ñ–≤–Ω—ñ, —ó—Ö –ø–æ—Ä—è–¥–æ–∫ –º—ñ–∂ —Å–æ–±–æ—é –Ω–µ –∑–º—ñ–Ω–∏—Ç—å—Å—è
//*  }
//*  return a - b;  
//* });

//* console.log(sameScores);//[19, 35, 35, 56, 61, 74, 92]

// –û—Å—å –∫–ª—é—á–æ–≤–∏–π –º–æ–º–µ–Ω—Ç:
// - –î–≤–∞ `35` –∑–∞–ª–∏—à–∏–ª–∏—Å—è –æ–¥–∏–Ω –≤—ñ–¥–Ω–æ—Å–Ω–æ –æ–¥–Ω–æ–≥–æ —É —Ç–æ–º—É –∂ –ø–æ—Ä—è–¥–∫—É, —è–∫ –±—É–ª–∏ –≤ –ø–æ—á–∞—Ç–∫–æ–≤–æ–º—É –º–∞—Å–∏–≤—ñ. –¶–µ –∑–∞–±–µ–∑–ø–µ—á—É—î —É–º–æ–≤–∞ `return 0;`, —è–∫–∞ –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ —Ä—ñ–≤–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω—é—é—Ç—å –ø–æ—Ä—è–¥–æ–∫ –º—ñ–∂ —Å–æ–±–æ—é.
// - –†–µ—à—Ç–∞ —á–∏—Å–µ–ª —Å–æ—Ä—Ç—É—é—Ç—å—Å—è —É –∑–≤–∏—á–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É —á–µ—Ä–µ–∑ `a - b`.
// –¢–∞–∫–∏–º —á–∏–Ω–æ–º, —è–∫—â–æ –º–∞—Å–∏–≤ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è, –≤–æ–Ω–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–∞ —Å–≤–æ—ó—Ö –ø–æ–∑–∏—Ü—ñ—è—Ö **–æ–¥–∏–Ω –≤—ñ–¥–Ω–æ—Å–Ω–æ –æ–¥–Ω–æ–≥–æ**, –∞–ª–µ –∑–∞–≥–∞–ª—å–Ω–∞ —Å—Ö–µ–º–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î —è–∫ –∑–∞–∑–≤–∏—á–∞–π. üòä 
  
// –ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É, —â–æ –ø—Ä–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—ñ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª —ñ –ø–µ—Ä–µ–¥–∞—á—ñ –≤ –º–µ—Ç–æ–¥ toSorted() –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—ó, —á–∏—Å–ª–∞ –≤–∂–µ –Ω–µ –±—É–¥—É—Ç—å –ø—Ä–∏–≤–æ–¥–∏—Ç–∏—Å—è –¥–æ —Ä—è–¥–∫—ñ–≤, —Ç–æ–±—Ç–æ —ó—Ö 
// —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –±—É–¥–µ –æ—á—ñ–∫—É–≤–∞–Ω–∏–º —ñ –∑–≤–∏—á–Ω–∏–º.

//todo   –ó–∞–¥–∞—á–∞ :  

// The variable releaseDates is an array of numbers representing the years of publication of books.

// The online library needs to display books sorted by their release date, either in ascending or descending order. 
// Update the code so that the variable ascendingReleaseDates contains a copy of the releaseDates array sorted in ascending order, 
// while the variable descendingReleaseDates contains a copy sorted in descending order.

// Here‚Äôs the translation in native British English:

// The variable releaseDates is declared.
// The value of the variable releaseDates is the array
// [2016, 1967, 2008, 1984, 1973, 2012, 1997].
// The variable ascendingReleaseDates is declared.
// The value of the variable ascendingReleaseDates is the array
// [1967, 1973, 1984, 1997, 2008, 2012, 2016].
// The variable descendingReleaseDates is declared.
// The value of the variable descendingReleaseDates is the array
// [2016, 2012, 2008, 1997, 1984, 1973, 1967].

// const releaseDates = [2016, 1967, 2008, 1984, 1973, 2012, 1997];

// const ascendingReleaseDates = releaseDates.toSorted((a, b) => a - b);

// const descendingReleaseDates = releaseDates.toSorted((a, b) => b - a);

// console.log(ascendingReleaseDates); // [1967, 1973, 1984, 1997, 2008, 2012, 2016]
// console.log(descendingReleaseDates); // [2016, 2012, 2008, 1997, 1984, 1973, 1967]

//?   –°–≤—ñ–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤

// –î–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É, –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º –∞–±–æ —Å–ø–∞–¥–∞–Ω–Ω—è–º, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–µ—Ç–æ–¥ —Ä—è–¥–∫—ñ–≤ localeCompare().
// firstString.localeCompare(secondString)
// –í—ñ–Ω –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –Ω–∞ —Ä—è–¥–∫—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ (firstString) –∑ —Ç–∏–º, —â–æ –±—É–≤ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –π–æ–º—É —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç (secondString).

// "a".localeCompare("b"); // -1
// "b".localeCompare("a"); // 1
// "a".localeCompare("a"); // 0
// "b".localeCompare("b"); // 0

// –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–µ–≥–∞—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—â–æ firstString –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ø–µ—Ä–µ–¥ secondString
// –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–∑–∏—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—â–æ firstString –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ø—ñ—Å–ª—è secondString
// –Ø–∫—â–æ —Ä—è–¥–∫–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –Ω—É–ª—å —ñ —ó—Ö –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –ø–æ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—é –æ–¥–∏–Ω –¥–æ –æ–¥–Ω–æ–≥–æ –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è

// –ú–µ—Ç–æ–¥ localeCompare() –∑—Ä—É—á–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤, –æ—Å–∫—ñ–ª—å–∫–∏ –º–µ—Ç–æ–¥ toSorted() –æ—á—ñ–∫—É—î —Ç–∞–∫—ñ —Å–∞–º—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó.

// const students = ["Jacob", "Artemis", "Solomon", "Adrian", "Kai", "Ganymede"];

// const inAlphabetOrder = students.toSorted((a, b) => a.localeCompare(b));
// console.log(inAlphabetOrder); // [ "Adrian", "Artemis", "Ganymede", "Jacob", "Kai", "Solomon" ]

// const inReversedOrder = students.toSorted((a, b) => b.localeCompare(a));
// console.log(inReversedOrder); // [ "Solomon", "Kai", "Jacob", "Ganymede", "Artemis", "Adrian" ]

// –Ø–∫–∏–π —ñ–∑ –∫–æ–ª–±–µ–∫—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª?

// (a, b) => a.localeCompare(b)
//*  (a, b) => a - b
// Result

//* –¥–ª—è –∑–∞–∑–Ω–∞—á–µ–Ω–Ω—è —Å–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª –º–µ—Ç–æ–¥—É toSorted(compareFunction) –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é —Ñ–æ—Ä–º–∞—Ç—É (a, b) => a - b

// –Ø–∫–∏–π —ñ–∑ –∫–æ–ª–±–µ–∫—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤?

//* (a, b) => a.localeCompare(b)
// (a, b) => a - b
// Result

//* –î—É–∂–µ –¥–æ–±—Ä–µ! –î–ª—è –∑–∞–∑–Ω–∞—á–µ–Ω–Ω—è —Å–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –º–µ—Ç–æ–¥—É toSorted(compareFunction) –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é —Ñ–æ—Ä–º–∞—Ç—É (a, b) => a.localeCompare(b)

//todo     –ó–∞–¥–∞—á–∞:

// The variable authors is an array of strings representing book authors.

// The online library needs to display books sorted by author in both alphabetical and reverse alphabetical order. Complete the code so that the variable authorsInAlphabetOrder contains a copy of the authors array sorted alphabetically, and the variable authorsInReversedOrder contains a copy sorted in reverse alphabetical order.

// The variable authors is declared.
// The value of the variable authors is an array
// ["Tanith Lee", "Bernard Cornwell", "Robert Sheckley", "John Green", "Howard Lovecraft"].
// The variable authorsInAlphabetOrder is declared.
// The value of the variable authorsInAlphabetOrder is an array
// ["Bernard Cornwell", "John Green", "Howard Lovecraft", "Robert Sheckley", "Tanith Lee"].
// The variable authorsInReversedOrder is declared.
// The value of the variable authorsInReversedOrder is an array
// ["Tanith Lee", "Robert Sheckley", "Howard Lovecraft", "John Green", "Bernard Cornwell"].
// The method toSorted() is used.

// const authors = [
//   "Tanith Lee",
//   "Bernard Cornwell",
//   "Robert Sheckley",
//   "Fyodor Dostoevsky",
//   "Howard Lovecraft",
// ];

// const authorsInAlphabetOrder = authors.toSorted((a, b) => a.localeCompare.b);

// const authorsInReversedOrder = authors.toSorted((a, b) => b.localeCompare.a);

// console.log(authorsInReversedOrder); // ["Tanith Lee", "Robert Sheckley", "Fyodor Dostoevsky", "Howard Lovecraft", "Bernard Cornwell"]  
// console.log(authorsInAlphabetOrder); // ["Bernard Cornwell", "Fyodor Dostoevsky", "Howard Lovecraft", "Robert Sheckley", "Tanith Lee"]

//?  –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤

// –ü—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –∑ –º–∞—Å–∏–≤–æ–º –æ–±'—î–∫—Ç—ñ–≤ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞ —á–∏—Å–ª–æ–≤–∏–º –∞–±–æ —Ä—è–¥–∫–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –ø–µ–≤–Ω–æ—ó –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ. 
// –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —É –Ω–∞—Å —î –≥—Ä—É–ø–∞ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ –±–∞–ª–∞–º–∏ –∑–∞ —Ç–µ—Å—Ç.–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑–∞ —Ç—Ä—å–æ–º–∞ —Ä—ñ–∑–Ω–∏–º–∏ —Å—Ü–µ–Ω–∞—Ä—ñ—è–º–∏:

// –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –±–∞–ª—ñ–≤
// –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –±–∞–ª—ñ–≤
// –∑–∞ —ñ–º'—è–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É

// const students = [
//   { name: "Mango", score: 83 },
//   { name: "Poly", score: 59 },
//   { name: "Ajax", score: 37 },
//   { name: "Kiwi", score: 94 },
// ];

// const inAscendingScoreOrder = students.toSorted(
//   (firstStudent, secondStudent) => firstStudent.score - secondStudent.score
// );

// const inDescendingScoreOrder = students.toSorted(
//   (firstStudent, secondStudent) => secondStudent.score - firstStudent.score
// );

// const inAlphabeticalOrder = students.toSorted((firstStudent, secondStudent) =>
//   firstStudent.name.localeCompare(secondStudent.name)
// );

// console.log(inAscendingScoreOrder);

// console.log(inDescendingScoreOrder);
// console.log(inAlphabeticalOrder);
//! –ù–æ—Ç–∞—Ç–∫–∏:
// –£ —Ü—å–æ–º—É –∫–æ–¥—ñ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ `toSorted()` –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É –æ–±'—î–∫—Ç—ñ–≤ `students` –∑–∞ —Ä—ñ–∑–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏:
// 1. `inAscendingScoreOrder` - —Å–æ—Ä—Ç—É—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º —ó—Ö–Ω—ñ—Ö –±–∞–ª—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ `score` –ø–µ—Ä—à–æ–≥–æ —ñ –¥—Ä—É–≥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.
// 2. `inDescendingScoreOrder` - —Å–æ—Ä—Ç—É—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º —ó—Ö–Ω—ñ—Ö –±–∞–ª—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ `score` –¥—Ä—É–≥–æ–≥–æ —ñ –ø–µ—Ä—à–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.
// 3. `inAlphabeticalOrder` - —Å–æ—Ä—Ç—É—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –∑–∞ —ó—Ö–Ω—ñ–º–∏ —ñ–º–µ–Ω–∞–º–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ `localeCompare()` –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä—è–¥–∫—ñ–≤.

//todo    –ó–∞–¥–∞—á–∞:

// The array books contains an array of book objects, each of which has properties title, author, and rating.
// Enhance the code in such a way that:

// The variable sortedByAuthorName contains an array of books sorted by the author's name in alphabetical order.
// The variable sortedByReversedAuthorName contains an array of books sorted by the author's name in reverse alphabetical order.
// The variable sortedByAscendingRating contains an array of books sorted by ascending rating.
// The variable sortedByDescendingRating contains an array of books sorted by descending rating.
// The variable books is declared.
// The value of the variable books is the original array of book objects.
// The variable sortedByAuthorName is declared.
// The value of the variable sortedByAuthorName is an array of books sorted by the author's name in alphabetical order.
// The variable sortedByReversedAuthorName is declared.
// The value of the variable sortedByReversedAuthorName is an array of books sorted by the author's name in reverse alphabetical order.
// The variable sortedByAscendingRating is declared.
// The value of the variable sortedByAscendingRating is an array of books sorted by ascending rating.
// The variable sortedByDescendingRating is declared.
// The value of the variable sortedByDescendingRating is an array of books sorted by descending rating.
// The method toSorted() is used to iterate through the array books.

// const books = [
//   {
//     title: "The Last Kingdom",
//     author: "Bernard Cornwell",
//     rating: 8.38,
//   },
//   {
//     title: "Beside Still Waters",
//     author: "Robert Sheckley",
//     rating: 8.51,
//   },
//   {
//     title: "The Dream of a Ridiculous Man",
//     author: "Fyodor Dostoevsky",
//     rating: 7.75,
//   },
//   {
//     title: "Redder Than Blood",
//     author: "Tanith Lee",
//     rating: 7.94,
//   },
//   {
//     title: "Enemy of God",
//     author: "Bernard Cornwell",
//     rating: 8.67,
//   },
// ];

// const sortedByAuthorName = books.toSorted((a, b) => a.author.localeCompare(b.author));
// const sortedByReversedAuthorName = books.toSorted((a, b) => b.author.localeCompare(a.author));

// const sortedByAscendingRating = books.toSorted((a, b) => a.rating - b.rating);

// const sortedByDescentingRating = books.toSorted((a, b) => b.rating - a.rating);


// console.log(sortedByAuthorName);
// console.log(sortedByReversedAuthorName);
// console.log(sortedByAscendingRating);
// console.log(sortedByDescentingRating);

//!       –õ–∞–Ω—Ü—é–∂–∫–∏ –º–µ—Ç–æ–¥—ñ–≤

// –£ –Ω–∞—Å —î –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ –∑ —ñ–º–µ–Ω–∞–º–∏, –±–∞–ª–∞–º–∏ –π –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.


// const students = [
//   { name: "Mango", score: 83, courses: ["mathematics", "physics"] },
//   { name: "Poly", score: 59, courses: ["science", "mathematics"] },
//   { name: "Ajax", score: 37, courses: ["physics", "biology"] },
//   { name: "Kiwi", score: 94, courses: ["literature", "science"] },
// ];

// –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Å–∏–≤ —ó—Ö–Ω—ñ—Ö —ñ–º–µ–Ω, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º –±–∞–ª—ñ–≤ –∑–∞ —Ç–µ—Å—Ç.

// –î–ª—è —Ü—å–æ–≥–æ:

// –í—ñ–¥—Å–æ—Ä—Ç—É—î–º–æ –º–∞—Å–∏–≤ –º–µ—Ç–æ–¥–æ–º toSorted(),
// –ü—ñ—Å–ª—è —á–æ–≥–æ –º–µ—Ç–æ–¥–æ–º map() —Å—Ç–≤–æ—Ä–∏–º–æ –º–∞—Å–∏–≤ –∑–Ω–∞—á–µ–Ω—å –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ name –∑ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ–≥–æ –º–∞—Å–∏–≤—É.

// const sortedByAscendingScore = students.toSorted((a, b) => a.score - b.score);
// const names = sortedByAscendingScore.map(student => student.name);

// console.log(sortedByAscendingScore); // [{name: "Ajax", score: 37}, {name: "Poly", score: 59}, {name: "Mango", score: 83}, {name: "Kiwi", score: 94}]
// console.log(names); // ["Ajax", "Poly", "Mango", "Kiwi"]


// –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º—É, —â–æ –≤ –Ω–∞—Å –∑'—è–≤–ª—è—é—Ç—å—Å—è –ø—Ä–æ–º—ñ–∂–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∫—Ä—ñ–º —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó. –ó–º—ñ–Ω–Ω–∞ sortedByAscendingScore ‚Äî –∑–∞–π–≤–∞. 
// –í–æ–Ω–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø—Ä–æ–º—ñ–∂–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.
// –ü–æ–∑–±—É—Ç–∏—Å—è —Ç–∞–∫–∏—Ö ¬´–º–µ—Ä—Ç–≤–∏—Ö¬ª –∑–º—ñ–Ω–Ω–∏—Ö –º–æ–∂–Ω–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –≤–∏–∫–ª–∏–∫—ñ–≤ –º–µ—Ç–æ–¥—ñ–≤ —É –ª–∞–Ω—Ü—é–∂–∫–∏. 
// –ö–æ–∂–Ω–∏–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º–µ—Ç–æ–¥ –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ä–æ–±–æ—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ.

//*   const names = students
//*     .toSorted((a, b) => a.score - b.score)
//*     .map(student => student.name);

//*   console.log(names); // ["Ajax", "Poly", "Mango", "Kiwi"]

// –ù–∞ –º–∞—Å–∏–≤—ñ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ toSorted()
// –î–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ä–æ–±–æ—Ç–∏ –º–µ—Ç–æ–¥—É toSorted() –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ map()
// –ó–º—ñ–Ω–Ω—ñ–π names –ø—Ä–∏—Å–≤–æ—é—î—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ –º–µ—Ç–æ–¥—É map()

// –û—Ç—Ä–∏–º–∞—î–º–æ –º–∞—Å–∏–≤ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º.

// const uniqueSortedCourses = students
//   .flatMap(student => student.courses)
//   .filter((course, index, array) => array.indexOf(course) === index)
//   .toSorted((a, b) => a.localeCompare(b));

// console.log(uniqueSortedCourses); // ["biology", "science", "literature", "mathematics", "physics"]



// –ù–∞ –≤–∏—Ö—ñ–¥–Ω–æ–º—É –º–∞—Å–∏–≤—ñ –≤–∏–∫–ª–∏–∫–∞—î–º–æ flatMap() —ñ —Ä–æ–±–∏–º–æ —Ä–æ–∑–≥–ª–∞–¥–∂–µ–Ω–∏–π –º–∞—Å–∏–≤ —É—Å—ñ—Ö –∫—É—Ä—Å—ñ–≤
// –î–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –º–µ—Ç–æ–¥—É flatMap() –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ filter() –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
// *    –¶–µ–π —Ä—è–¥–æ–∫ **–≤–∏–¥–∞–ª—è—î –¥—É–±–ª—ñ–∫–∞—Ç–∏** –∑ –º–∞—Å–∏–≤—É `courses`. –î–∞–≤–∞–π —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –π–æ–≥–æ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ:

// *    const courses = ["biology", "science", "literature", "science", "mathematics", "biology", "physics"];
// *    const uniqueCourses = courses.filter((course, index, array) => array.indexOf(course) === index);
// *    console.log(uniqueCourses);
// *    ### –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:
// *    1. **array.indexOf(course)** –ø–æ–≤–µ—Ä—Ç–∞—î **–ø–µ—Ä—à–∏–π** —ñ–Ω–¥–µ–∫—Å, –¥–µ –∑'—è–≤–ª—è—î—Ç—å—Å—è –∫—É—Ä—Å —É –º–∞—Å–∏–≤—ñ.
// *    2. –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π `index` –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ `indexOf(course)`, –∫—É—Ä—Å –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è.
// 3. –Ø–∫—â–æ –∫—É—Ä—Å —É–∂–µ –∑—É—Å—Ç—Ä—ñ—á–∞–≤—Å—è —Ä–∞–Ω—ñ—à–µ, —Ç–æ–±—Ç–æ –π–æ–≥–æ `indexOf(course)` **–Ω–µ –¥–æ—Ä—ñ–≤–Ω—é—î** –ø–æ—Ç–æ—á–Ω–æ–º—É `index`, –≤—ñ–Ω **–≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤—É—î—Ç—å—Å—è**.
// *    ### –©–æ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è:
// *    - –£ –ø–æ—á–∞—Ç–∫–æ–≤–æ–º—É –º–∞—Å–∏–≤—ñ –±—É–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏ `"science"` —Ç–∞ `"biology"`.
// *    - –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –≤–æ–Ω–∏ **–∑–∞–ª–∏—à–∏–ª–∏—Å—è —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑**.

// *    –†–µ–∑—É–ª—å—Ç–∞—Ç:
// *    ["biology", "science", "literature", "mathematics", "physics"]
// *    –¢–µ–ø–µ—Ä –º–∞—Å–∏–≤ –º—ñ—Å—Ç–∏—Ç—å **—Ç—ñ–ª—å–∫–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è**! üòä
// *    –Ø–∫—â–æ —Ö–æ—á–µ—à –ø–æ–±–∞—á–∏—Ç–∏, —è–∫—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ, –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –æ–∫—Ä–µ–º–∏–π –º–∞—Å–∏–≤ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤:
// *    const duplicateCourses = courses.filter((course, index, array) => array.indexOf(course) !== index);
// *    console.log(duplicateCourses); // ["science", "biology"]
// *    –¶–µ–π –∫–æ–¥ –ø–æ–∫–∞–∂–µ —Å–∞–º–µ **—Ç–µ, —â–æ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ**. –°–ø–æ–¥—ñ–≤–∞—é—Å—è, —Ü–µ –ø—Ä–æ—è—Å–Ω–∏–ª–æ –ª–æ–≥—ñ–∫—É! üöÄ

// –ù–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ –º–µ—Ç–æ–¥—É filter() –≤–∏–∫–ª–∏–∫–∞—î–º–æ toSorted()
// –ó–º—ñ–Ω–Ω—ñ–π uniqueSortedCourses –ø—Ä–∏—Å–≤–æ—é—î—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ –º–µ—Ç–æ–¥—É toSorted()

// –õ–∞–Ω—Ü—é–∂–æ–∫ –º–µ—Ç–æ–¥—ñ–≤ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏, –∞–ª–µ –∑–∞–∑–≤–∏—á–∞–π –Ω–µ –±—ñ–ª—å—à–µ 2-3 –æ–ø–µ—Ä–∞—Ü—ñ–π.
// –ü–æ-–ø–µ—Ä—à–µ, –ø–µ—Ä–µ–±–∏—Ä–∞—é—á—ñ –º–µ—Ç–æ–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –ø—Ä–æ—Å—Ç–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –Ω–∞–¥ –∫–æ–ª–µ–∫—Ü—ñ—î—é.
// –ü–æ-–¥—Ä—É–≥–µ, –≤–∏–∫–ª–∏–∫ –∫–æ–∂–Ω–æ–≥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É ‚Äî —Ü–µ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è –º–∞—Å–∏–≤—É, —â–æ –∑–∞ –≤–µ–ª–∏–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–æ–∂–µ –ø–æ–∑–Ω–∞—á–∏—Ç–∏—Å—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.

//todo    –ó–∞–¥–∞—á–∞: 

// The array books contains an array of book objects, each of which has properties title, author, and rating.

// Extend the code in such a way that the variable names contains an array of author names in alphabetical order, whose book ratings are greater 
// than the value of the variable MIN_BOOK_RATING.Use a chain of methods.

// The variable books is declared.
// The value of the variable books is the initial array of objects.
// The variable MIN_BOOK_RATING is declared.
// The value of the variable MIN_BOOK_RATING is the number 8.
// The variable names is declared.
// The value of the variable names is the array
// ["Bernard Cornwell", "Howard Lovecraft", "Robert Sheckley"].
// The variable names should be formed using the method chain filter, map, and toSorted, while no other variables should be declared.
// const books = [
//   {
//     title: "The Last Kingdom",
//     author: "Bernard Cornwell",
//     rating: 8.38,
//   },
//   {
//     title: "Beside Still Waters",
//     author: "Robert Sheckley",
//     rating: 8.51,
//   },
//   {
//     title: "The Dream of a Ridiculous Man",
//     author: "Fyodor Dostoevsky",
//     rating: 7.75,
//   },
//   { title: "Redder Than Blood", author: "Tanith Lee", rating: 7.94 },
//   {
//     title: "The Dreams in the Witch House",
//     author: "Howard Lovecraft",
//     rating: 8.67,
//   },
// ];
// const MIN_BOOK_RATING = 8;

// const names = books
//   .filter(book => book.rating > MIN_BOOK_RATING)
//   .map(book => book.author)
//   .toSorted((a, b) => a.localeCompare(b));

// console.log(names); // ["Bernard Cornwell", "Howard Lovecraft", "Robert Sheckley"]
//! Notes:
// In this code, we use a chain of methods to filter, map, and sort the authors of books based on their ratings.
// 1. The `filter()` method filters the books array to include only those books with a rating greater than `MIN_BOOK_RATING`.
// 2. The `map()` method extracts the `author` property from each book object in the filtered array.
// 3. The `toSorted()` method sorts the resulting array of author names in alphabetical order using the `localeCompare()` method.
// This allows us to create a new array `names` that contains the names of authors whose books have a rating greater than 8, sorted alphabetically.
// The final result is logged to the console, showing the sorted array of author names.