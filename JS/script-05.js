//!   –§—É–Ω–∫—Ü—ñ—è —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è
// ? –ó–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó (–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–µ—ó) –º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —É –∑–º—ñ–Ω–Ω—ñ–π –∞–±–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –≤ —è–∫–æ—Å—Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç—É –≤ —ñ–Ω—à—É —Ñ—É–Ω–∫—Ü—ñ—é. –£ —Ü—å–æ–º—É —Å–µ–Ω—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ
// –≤—ñ–¥—Ä—ñ–∑–Ω—è—é—Ç—å—Å—è –≤—ñ–¥ —á–∏—Å–µ–ª, —Ä—è–¥–∫—ñ–≤ –∞–±–æ –º–∞—Å–∏–≤—ñ–≤.
// function greet(name) {
//   return `Welcome ${name}!`;
// }

// // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é greet —ñ –≤–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∫–æ–Ω—Å–æ–ª—å
// console.log(greet("Mango")); // "Welcome Mango!"
// // –í–∏–≤–æ–¥–∏–º–æ —Ñ—É–Ω–∫—Ü—ñ—é greet —É –∫–æ–Ω—Å–æ–ª—å, –Ω–µ –≤–∏–∫–ª–∏–∫–∞—é—á–∏ —ó—ó
// console.log(greet); // ∆í greet() {return `Welcome ${name}!`}
// –£ –ø–µ—Ä—à–æ–º—É –ª–æ–∑—ñ –º–∏ –≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é greet –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫—Ä—É–≥–ª–∏—Ö –¥—É–∂–æ–∫, —ñ –≤ –∫–æ–Ω—Å–æ–ª—å –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ó—ó –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.
// –£ –¥—Ä—É–≥–æ–º—É –ª–æ–∑—ñ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é, –∞ –Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ó—ó –≤–∏–∫–ª–∏–∫—É(–≤—ñ–¥—Å—É—Ç–Ω—ñ –∫—Ä—É–≥–ª—ñ –¥—É–∂–∫–∏),
// —Ç–æ–º—É –≤ –∫–æ–Ω—Å–æ–ª—å –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—î –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –Ω–∞—à–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó.–¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é –º–æ–∂–Ω–∞ –∑–∞–ø–∏—Å–∞—Ç–∏ —É –∑–º—ñ–Ω–Ω—É –∞–±–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç —ñ–Ω—à—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó.
// –§—É–Ω–∫—Ü—ñ—è —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è
// –£ JavaScript —Ñ—É–Ω–∫—Ü—ñ—ó ‚Äî —Ü–µ –æ–±'—î–∫—Ç–∏, —Ç–æ–º—É –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å:

// –ó–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—è —É –∑–º—ñ–Ω–Ω–∏—Ö

// –ü–µ—Ä–µ–¥–∞–≤–∞—Ç–∏—Å—è —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤ —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// –í–∏–≤–æ–¥–∏—Ç–∏—Å—è —É –∫–æ–Ω—Å–æ–ª—å –±–µ–∑ –≤–∏–∫–ª–∏–∫—É

// –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ console.log(greet("Mango")) —ñ console.log(greet)
// üîπ –ü–µ—Ä—à–∏–π –≤–∏–ø–∞–¥–æ–∫:
// console.log(greet("Mango"));
// –í–∏–∫–ª–∏–∫–∞—î–º–æ greet("Mango") (–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫—Ä—É–≥–ª–∏—Ö –¥—É–∂–æ–∫).
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î "Welcome Mango!", —ñ —Ü–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å.

// üîπ –î—Ä—É–≥–∏–π –≤–∏–ø–∞–¥–æ–∫:

// javascript
// console.log(greet);
// –¢—É—Ç –ù–ï –≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, –∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–µ—ó.

// –í –∫–æ–Ω—Å–æ–ª—å –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —ó—ó –≤–Ω—É—Ç—Ä—ñ—à–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (—Ç–æ–±—Ç–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–∞–º–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó).

// –©–æ —Ü–µ –Ω–∞–º –¥–∞—î?
// –û—Å–∫—ñ–ª—å–∫–∏ –º–∏ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è, —ó—ó –º–æ–∂–Ω–∞: ‚úîÔ∏è –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —É –∑–º—ñ–Ω–Ω—ñ–π:

// javascript
// const sayHello = greet;
// console.log(sayHello("Alice")); // "Welcome Alice!"

// –ü–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –≤ —ñ–Ω—à—É —Ñ—É–Ω–∫—Ü—ñ—é —è–∫ –∫–æ–ª–±–µ–∫:

// javascript
// function processUser(name, callback) {
//     return callback(name);
// }
// console.log(processUser("Bob", greet)); // "Welcome Bob!"
// –¢—É—Ç greet –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –±–µ–∑ –≤–∏–∫–ª–∏–∫—É(greet –±–µ–∑()), —ñ –ø–æ—Ç—ñ–º processUser –≤–∂–µ –≤–∏–∫–ª–∏–∫–∞—î —ó—ó.
// –ß–æ–º—É —Ü–µ –≤–∞–∂–ª–∏–≤–æ?
// –¶—è –æ—Å–æ–±–ª–∏–≤—ñ—Å—Ç—å –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–º –±—É–¥—É–≤–∞—Ç–∏ –≥–Ω—É—á–∫–∏–π —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∫–æ–¥.–ó–∞–≤–¥—è–∫–∏ —Ü—å–æ–º—É –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—ó,
// –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ.
// –ó–∞–¥–∞—á–∞:
// The makePizza function returns a string with a message to the client.

// Complete the code so that the result variable contains the result of the makePizza function, and the pointer variable contains
// a reference to the makePizza function.

// The makePizza function is declared.
// The variable result is declared.
// The value of the result variable is the string ‚ÄòYour pizza is being prepared, please wait.‚Äô.
// The value of the result variable is obtained by calling the function.
// The variable pointer is declared.
// The value of the pointer variable is a reference to the makePizza function.

// function makePizza() {
//     return "Your pizza is being prepared, please wait.";
//   }
//   // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∑–º—ñ–Ω–Ω—ñ–π result
// const result = makePizza();

// // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é —É –∑–º—ñ–Ω–Ω—ñ–π pointer
// const pointer = makePizza;

// console.log(result);  // "Your pizza is being prepared, please wait."
// console.log(pointer); // ∆í makePizza() { return "Your pizza is being prepared, please wait."; }

//?  –ö–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// –û–≥–æ–ª–æ—Å–∏–º–æ –¥–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó greet —ñ notify, —è–∫—ñ –ø—Ä–∏–π–º–∞—é—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –≤–∏–≤–æ–¥—è—Ç—å —Ä—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

// function greet(name) {
//   console.log(`Welcome ${name}!`);
// }

// function notify(name) {
//   console.log(`Dear ${name}, your room will be ready in 30 minutes`);
// }

// // –î–∞–ª—ñ –æ–≥–æ–ª–æ—Å–∏–º–æ —â–µ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é registerGuest, —è–∫–∞ –ø—Ä–∏–π–º–∞—Ç–∏–º–µ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.

// function registerGuest(name, callback) {
//   console.log(`Registering ${name}!`);
//   callback(name);
// }
// name ‚Äî —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
// callback ‚Äî –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—É —Ç—Ä–µ–±–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤ —Ç—ñ–ª—ñ registerGuest —ñ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ó–π —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á

// –¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–≥–æ–ª–æ—à–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É registerGuest.

// function greet(name) {
//   console.log(`Welcome ${name}!`);
// }

// function notify(name) {
//   console.log(`Dear ${name}, your room will be ready in 30 minutes`);
// }

// function registerGuest(name, callback) {
//   console.log(`Registering ${name}!`);
//   callback(name);
// }

// registerGuest("Mango", greet); // "Registering Mango!"
// 															 // "Welcome Mango!"

// registerGuest("Mango", notify); // "Registering Mango!"
																// "Dear Mango, your room will be ready in 30 minutes"
// –ú–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é greet –∞–±–æ notify —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç, —Ç–æ–º—É –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –ø—Ä–∏—Å–≤–æ—î–Ω—ñ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä callback —ñ –≤–∏–∫–ª–∏–∫–∞–Ω—ñ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó registerGuest –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫—Ä—É–≥–ª–∏—Ö –¥—É–∂–æ–∫.

// –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É (callback, –∫–æ–ª–±–µ–∫) ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —ñ–Ω—à—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç, –∞ —Ç–∞ —É —Å–≤–æ—é —á–µ—Ä–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–µ—Ä–µ–¥–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é.

// –£ –ø—Ä–∏–∫–ª–∞–¥—ñ —Ñ—É–Ω–∫—Ü—ñ—ó greet —ñ notify ‚Äî —Ü–µ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó, —Ç–æ–º—É —â–æ –º–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ —ó—Ö —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç —É —Ñ—É–Ω–∫—Ü—ñ—é registerGuest. –Ü–º'—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∫–æ–ª–±–µ–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—ñ–ª—å–Ω–∏–º, –≥–æ–ª–æ–≤–Ω–µ –ø–∞–º'—è—Ç–∞—Ç–∏, —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è–º –±—É–¥–µ —Ñ—É–Ω–∫—Ü—ñ—è.

// –§—É–Ω–∫—Ü—ñ—è –≤–∏—â–æ–≥–æ –ø–æ—Ä—è–¥–∫—É (higher order function) ‚Äî —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –≤ —è–∫–æ—Å—Ç—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Ñ—É–Ω–∫—Ü—ñ—é –≤ —è–∫–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.

// –£ –ø—Ä–∏–∫–ª–∞–¥—ñ —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è registerGuest, —Ç–æ–º—É —â–æ –≤–æ–Ω–∞ –æ—á—ñ–∫—É—î —ñ–Ω—à—É —Ñ—É–Ω–∫—Ü—ñ—é —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä —ñ –≤–∏–∫–ª–∏–∫–∞—î —ó—ó.

//* –í–∏–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–µ—Ä–µ–¥–∞—á—ñ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó `updateEmail` –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó `makeAction`

// makeAction(updateEmail())
// updateEmail(makeAction)
//*  makeAction(updateEmail)
// updateEmail(makeAction())
// Result
// –Ü —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å! –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é updateEmail –º–∞—î –ø–µ—Ä–µ–¥–∞—Ç–∏—Å—å —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç —É –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏—â–æ–≥–æ –ø–æ—Ä—è–¥–∫—É makeAction. –û—Ç–∂–µ,
// makeAction(updateEmail) —î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º.

// –ó–∞–¥–∞—á–∞:
// The function makeMessage takes one parameter, the name of the pizza being delivered, pizzaName, and returns a string with a
// message for the customer.

// Enhance the makeMessage function so that it expects a second parameter(the callback parameter) as a callback function and returns the result of its
// invocation.The functions deliverPizza or makePizza will be passed as callbacks to makeMessage and will expect the name of the delivered pizza as an argument.

// The function deliverPizza is declared.
// The function makePizza is declared.
// The function makeMessage is declared.
// The function makeMessage takes two parameters, named according to the task, pizzaName and callback.
// The call makeMessage("Royal Grand", makePizza) returns the string "Pizza Royal Grand is being prepared, please wait...".
// The call makeMessage("Ultracheese", deliverPizza) returns the string "Delivering Ultracheese pizza.".

// function deliverPizza(pizzaName) {
//     return `Delivering ${pizzaName} pizza.`;
// }
// function makePizza(pizzaName) {
//     return `Pizza ${pizzaName} is being prepared, please wait...`;
    
// }
// function makeMessage(pizzaName, callback) {
//     return callback(pizzaName);
// }
// console.log(makeMessage("Royal Grand", makePizza)); // "Pizza Royal Grand is being prepared, please wait..."
// console.log(makeMessage("Ultracheese", deliverPizza)); // "Delivering Ultracheese pizza."

//?   –Ü–Ω–ª–∞–π–Ω-–∫–æ–ª–±–µ–∫–∏

// –Ø–∫—â–æ –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—è –º–∞–ª–µ–Ω—å–∫–∞ —ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º, —ó—ó –º–æ–∂–Ω–∞ –æ–≥–æ–ª–æ—Å–∏—Ç–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó, –≤ —è–∫—É –ø–µ—Ä–µ–¥–∞—î–º–æ –∫–æ–ª–±–µ–∫.
// –¢–∞–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞–∑–∏–≤–∞—é—Ç—å—Å—è —ñ–Ω–ª–∞–π–Ω - –∫–æ–ª–±–µ–∫–∏.–í–æ–Ω–∏ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –≤ —è–∫–æ—Å—Ç—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —ñ –±—ñ–ª—å—à–µ –Ω—ñ–¥–µ –≤ –∫–æ–¥—ñ.

// function registerGuest(name, callback) {
//   console.log(`Registering ${name}!`);
//   callback(name);
// }

// // –ü–µ—Ä–µ–¥–∞—î–º–æ —ñ–Ω–ª–∞–π–Ω-—Ñ—É–Ω–∫—Ü—ñ—é greet —É —è–∫–æ—Å—Ç—ñ –∫–æ–ª–±–µ–∫–∞
// registerGuest("Mango", function greet(name) {
//   console.log(`Welcome ${name}!`);
// });

// // –ü–µ—Ä–µ–¥–∞—î–º–æ —ñ–Ω–ª–∞–π–Ω-—Ñ—É–Ω–∫—Ü—ñ—é notify —É —è–∫–æ—Å—Ç—ñ –∫–æ–ª–±–µ–∫–∞
// registerGuest("Poly", function notify(name) {
//   console.log(`Dear ${name}, your room will be ready in 30 minutes`);
// });
// –ó–ê–î–ê–ß–ê:
// The function makePizza has two parameters: pizzaName ‚Äî the name of the pizza, and callback ‚Äî the callback function. During execution, makePizza calls this callback,
// passing pizzaName as an argument.

// Complete the second call to the function makePizza(pizzaName, callback) by passing the inline callback function eatPizza(pizzaName) as the second argument.
// he callback eatPizza logs the string "Eating pizza <pizza name>", where < pizza name > is the value of the parameter pizzaName.

// The function makePizza has been declared.
// The function makePizza accepts two parameters.
// The function eatPizza with a single parameter pizzaName has been passed as the second argument during the call makePizza("Ultracheese").

// function makePizza(pizzaName, callback) {
//     console.log(`Pizza ${pizzaName} is being prepared, please wait...`);
//     callback(pizzaName);
//   }
  
//   // –ö–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—è eatPizza
//   function eatPizza(pizzaName) {
//     console.log(`Eating pizza ${pizzaName}`);
//   }
  
//   // –í–∏–∫–ª–∏–∫ makePizza –∑ –∞–Ω–æ–Ω—ñ–º–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—î—é
//   makePizza("Royal Grand", function deliverPizza(pizzaName) {
//     console.log(`Delivering pizza ${pizzaName}`);
//   });
  
//   // –í–∏–∫–ª–∏–∫ makePizza –∑ eatPizza —è–∫ –∫–æ–ª–±–µ–∫–æ–º
//   makePizza("Ultracheese", eatPizza);

//? –ú–µ—Ç–æ–¥ forEach(callback) ‚Äî —Ü–µ –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è –º–∞—Å–∏–≤—É, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∑–∞–º—ñ–Ω–∏ —Ü–∏–∫–ª—ñ–≤ for —ñ for...of –≤ —Ä–æ–±–æ—Ç—ñ –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é.

// array.forEach(function callback(element, index, array) {
//   // –¢—ñ–ª–æ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// });

// –ü–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –º–∞—Å–∏–≤ array
// –í–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É
// –ü–æ–≤–µ—Ä—Ç–∞—î undefined, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —è–≤–Ω–æ –∑–∞–¥–∞—Ç–∏ –≤–∏—Ä–∞–∑ –ø—ñ—Å–ª—è return

// –ö–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—è –º–µ—Ç–æ–¥—É forEach() –∑–∞–≤–∂–¥–∏ –æ—Ç—Ä–∏–º—É—î —Ç–∞–∫—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É element, –π–æ–≥–æ —ñ–Ω–¥–µ–∫—Å index —ñ –≤–ª–∞—Å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤ array. –ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É, —â–æ —ñ–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–æ–≤—ñ–ª—å–Ω—ñ, –∞–ª–µ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∞ —ó—Ö –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å(!). –¢–∞–∫–æ–∂ –Ω–µ –≤—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –æ–≥–æ–ª–æ—à—É–≤–∞—Ç–∏. –Ø–∫—â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä element (—Ü–µ –Ω–∞–π—á–∞—Å—Ç—ñ—à–∏–π –≤–∏–ø–∞–¥–æ–∫), —Ç–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ index —Ç–∞ array –º–æ–∂–Ω–∞ –Ω–µ –æ–≥–æ–ª–æ—à—É–≤–∞—Ç–∏.
// const numbers = [5, 10, 15, 20, 25];

// // –ö–ª–∞—Å–∏—á–Ω–∏–π for
// for (let i = 0; i < numbers.length; i += 1) {
//   console.log(`Index ${i}, value ${numbers[i]}`);
// }

// // –ü–µ—Ä–µ–±–∏—Ä–∞—é—á–∏–π –º–µ—Ç–æ–¥ forEach
// numbers.forEach(function (number, index) {
//   console.log(`Index ${index}, value ${number}`);
// });



// –Ñ–¥–∏–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫, –∫–æ–ª–∏ –≤–∞—Ä—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü–∏–∫–ª–∏ for –∞–±–æ for...of –¥–ª—è –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è –º–∞—Å–∏–≤—É, ‚Äî —Ü–µ –∑–∞–¥–∞—á—ñ –∑ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü–∏–∫–ª—É. –ü–µ—Ä–µ—Ä–≤–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É forEach –Ω–µ –º–æ–∂–Ω–∞, –≤—ñ–Ω –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–±–∏—Ä–∞—î –º–∞—Å–∏–≤ –¥–æ –∫—ñ–Ω—Ü—è.
// –©–æ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç–æ–¥ forEach?

// –ù–æ–≤–∏–π –º–∞—Å–∏–≤
//* –ü–æ–≤–µ—Ä—Ç–∞—î undefined
// –¢–µ, —â–æ –≤–∫–∞–∑–∞–Ω–æ –≤ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó
// Result

// –í–∞—Ä—Ç–æ –∑–∞–ø–∞–º‚Äô—è—Ç–∞—Ç–∏: –º–µ—Ç–æ–¥ `forEach(callback)` : 1) –ø–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –º–∞—Å–∏–≤, 2) –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É, * 3) –ø–æ–≤–µ—Ä—Ç–∞—î `undefined`.

// –ó–∞–¥–∞—á–∞:
// The calculateTotalPrice(orderedItems) function takes one parameter orderedItems ‚Äî an array of numbers, and calculates the total sum of its elements, which is stored in
//     the variable totalPrice and returned as the result of the function.

// Complete the call to the forEach method by passing it a callback function that adds the value of the current item of the orderedItems array to totalPrice at each iteration.

// The calculateTotalPrice(orderedItems) function is declared.
// Calling the calculateTotalPrice([12, 85, 37, 4]) function returns 138.
// Calling the calculateTotalPrice([164, 48, 291]) function returns 503.
// Calling the calculateTotalPrice([412, 371, 94, 63, 176]) function returns 1116.
// Calling a function with random but valid arguments returns the correct value.

// function calculateTotalPrice(orderedItems) {
//     let totalPrice = 0;
  
//     orderedItems.forEach(item => {
//         totalPrice += item;
//     });
  
//     return totalPrice;
// }
// console.log(calculateTotalPrice([12, 85, 37, 4])); // 138
// console.log(calculateTotalPrice([164, 48, 291])); // 503
// console.log(calculateTotalPrice([412, 371, 94, 63, 176])); // 1116

// –ó–∞–¥–∞—á–∞:
// The function filterArray(numbers, value) takes an array of numbers numbers as its first parameter and returns a new array containing only those elements
// of the original array that are greater than the value of the second parameter value.If no such values are found, the function returns an empty array.

// Refactor the function so that instead of using a for loop, it uses the forEach method.

// A function filterArray(numbers, value) is declared.
// The forEach method is used to iterate over the array numbers.
// Calling filterArray([1, 2, 3, 4, 5], 3) returns [4, 5].
// Calling filterArray([1, 2, 3, 4, 5], 4) returns [5].
// Calling filterArray([1, 2, 3, 4, 5], 5) returns [].
// Calling filterArray([12, 24, 8, 41, 76], 38) returns [41, 76].
// Calling filterArray([12, 24, 8, 41, 76], 20) returns [24, 41, 76].
// Calling the function with random but valid arguments returns the correct value.

// function filterArray(numbers, value) {
//     const filteredNumbers = [];
    
//     numbers.forEach(number => {
//         if (number > value) {
//         filteredNumbers.push(number);
//         }
//     });
    
//     return filteredNumbers;
// }

// console.log(filterArray([1, 2, 3, 4, 5], 3)); // returns [4, 5]
// console.log(filterArray([1, 2, 3, 4, 5], 4)); // returns [5]
// console.log(filterArray([1, 2, 3, 4, 5], 5)); // [].
// console.log(filterArray([12, 24, 8, 41, 76],38));// [41, 76].
// console.log(filterArray([12, 24, 8, 41, 76], 20));// returns [24, 41, 76].


// ? –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
// –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó(—Å–ª–µ–Ω–≥ ‚Äî ‚Äú—Å—Ç—Ä—ñ–ª–∫–∏‚Äù) –º–∞—é—Ç—å —Å–∫–æ—Ä–æ—á–µ–Ω–∏–π, –ª–∞–∫–æ–Ω—ñ—á–Ω—ñ—à–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, —â–æ –∑–º–µ–Ω—à—É—î –æ–±—Å—è–≥ –∫–æ–¥—É, –æ—Å–æ–±–ª–∏–≤–æ –∫–æ–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—è –º–∞–ª–µ–Ω—å–∫–∞ –∞–±–æ —è–∫—â–æ –≤–æ–Ω–∞
// –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ –∫–æ–ª–±–µ–∫.
// –£—Å—ñ —Å—Ç—Ä—ñ–ª–∫–∏ —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è —è–∫ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –≤–∏—Ä–∞–∑, —ñ —ó—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—Ä–∏—Å–≤–æ—é–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ–π.

// // –ó–≤–∏—á–∞–π–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
// function classicAdd(a, b, c) {
//   return a + b + c;
// }

// // –¢–µ —Å–∞–º–µ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—î—é
// const arrowAdd = (a, b, c) => {
//   return a + b + c;
// };

// –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ function –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
// –û–¥—Ä–∞–∑—É –∑–∞–∑–Ω–∞—á–∞—î—Ç—å—Å—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
// –ü—ñ—Å–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–∏–º–≤–æ–ª => —ñ —Ç—ñ–ª–æ —Ñ—É–Ω–∫—Ü—ñ—ó —É —Ñ—ñ–≥—É—Ä–Ω–∏—Ö –¥—É–∂–∫–∞—Ö

// –Ø–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–µ–∫—ñ–ª—å–∫–∞, —Ç–æ –≤–æ–Ω–∏ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–æ–º—É –≤ –∫—Ä—É–≥–ª–∏—Ö –¥—É–∂–∫–∞—Ö, –º—ñ–∂ –∑–Ω–∞–∫–∞–º–∏ —Ä—ñ–≤–Ω–æ—Å—Ç—ñ = —ñ —Å—Ç—Ä—ñ–ª–∫–æ—é =>.

// const add = (a, b, c) => {
//   return a + b + c;
// };

// –Ø–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–¥–∏–Ω, –π–æ–≥–æ –º–æ–∂–Ω–∞ –æ–≥–æ–ª–æ—à—É–≤–∞—Ç–∏ –±–µ–∑ –∫—Ä—É–≥–ª–∏—Ö –¥—É–∂–æ–∫.
// const add = a => {
//   return a + 5;
// };

// –Ø–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ, —Ç–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ –∫—Ä—É–≥–ª—ñ –¥—É–∂–∫–∏.

// const greet = () => {
//   console.log("Hello!");
// };

// –ó–∞–¥–∞—á–∞:

// –öefactor the calculateTotalPrice() function so that it is declared as an arrow function.

// The variable calculateTotalPrice is declared.
// An arrow function with parameters is assigned to the calculateTotalPrice variable. (quantity, pricePerItem).
// Calling calculateTotalPrice(5, 100) returns 500.
// Calling calculateTotalPrice(8, 60) returns 480.
// Calling calculateTotalPrice(3, 400) returns 1200.
// Calling a function with random but valid arguments returns the correct value.

// const calculateTotalPrice = (quantity, pricePerItem) => {
//     return quantity * pricePerItem;
// }
// console.log(calculateTotalPrice(5, 100)); // 500
// console.log(calculateTotalPrice(8, 60)); // 480
// console.log(calculateTotalPrice(3, 400)); // 1200

//? –ù–µ—è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è

// –£ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –ø—ñ—Å–ª—è —Å–∏–º–≤–æ–ª—É => –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —ó—ó —Ç—ñ–ª–æ. –Ü—Å–Ω—É—î –¥–≤–∞ —Å–ø–æ—Å–æ–±–∏ –∑–∞–ø–∏—Å—É: –∑ —Ñ—ñ–≥—É—Ä–Ω–∏–º–∏ –¥—É–∂–∫–∞–º–∏ —ñ –±–µ–∑ –Ω–∏—Ö.
// –ó–∞–ø–∏—Å —ñ–∑ —Ñ—ñ–≥—É—Ä–Ω–∏–º–∏ –¥—É–∂–∫–∞–º–∏
// –Ø–∫—â–æ —î —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏ —ñ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —è–∫–µ—Å—å –∑–Ω–∞—á–µ–Ω–Ω—è, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —è–≤–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ return. –¶–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è —è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è (explicit return).
// const add = (a, b, c) => {
//   console.log(a, b, c);
//   return a + b + c;
// };
// –¢–∞–∫–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ —Ç–æ–º—É –≤–∏–ø–∞–¥–∫—É, —è–∫—â–æ –≤ —Ç—ñ–ª—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ —â–µ —è–∫—ñ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó, –æ–∫—Ä—ñ–º –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è.
// –ó–∞–ø–∏—Å –±–µ–∑ —Ñ—ñ–≥—É—Ä–Ω–∏—Ö –¥—É–∂–æ–∫
// –Ø–∫—â–æ —Ñ—ñ–≥—É—Ä–Ω—ñ –¥—É–∂–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ, —Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏—Ä–∞–∑—É, —è–∫–∏–π —Å—Ç–æ—ó—Ç—å –ø—ñ—Å–ª—è =>.–¶–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –Ω–µ—è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è(implicit return). –£ –ø—Ä–∏–∫–ª–∞–¥—ñ
// –ø–æ–≤–µ—Ä–Ω–µ—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏—Ä–∞–∑—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ a, b —ñ c.

// const add = (a, b, c) => a + b + c;
// –°–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–µ—è–≤–Ω–æ–≥–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Å—É—Ç—Ç—î–≤–æ —Å–∫–æ—Ä–æ—á—É—î ¬´—à—É–º¬ª –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –∑ —Ç—ñ–ª–æ–º —ñ –≤–∏—Ä–∞–∑–æ–º, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è. –¢–∏–º –Ω–µ –º–µ–Ω—à, –≤—ñ–Ω –¥–æ—Ä–µ—á–Ω–∏–π —Ç—ñ–ª—å–∫–∏ —Ç–æ–¥—ñ, –∫–æ–ª–∏ –≤ —Ç—ñ–ª—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∂–æ–¥–Ω–∏—Ö –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π, –æ–∫—Ä—ñ–º –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è.

// // –î–æ
// function classicAdd(a, b, c) {
//   return a + b + c;
// }

// // –ü—ñ—Å–ª—è
// const arrowAdd = (a, b, c) => a + b + c;
// // –ó–∞–¥–∞—á–∞:
// Refactor the calculateTotalPrice() function so that it uses an implicit return.

// The variable calculateTotalPrice is declared.
// The variable calculateTotalPrice is assigned an arrow function with parameters (quantity, pricePerItem).
// The function uses an implicit return.
// Calling calculateTotalPrice(5, 100) returns 500.
// Calling calculateTotalPrice(8, 60) returns 480.
// Calling calculateTotalPrice(3, 400) returns 1200.
// Calling a function with random but valid arguments returns the correct value.

// const calculateTotalPrice = (quantity, pricePerItem) => quantity * pricePerItem;

// console.log(calculateTotalPrice(5, 100)); // 500
// console.log(calculateTotalPrice(8, 60)); // 480
// console.log(calculateTotalPrice(3, 400)); // 1200

//? –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤ arguments

// –£ —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –Ω–µ–º–∞—î –ª–æ–∫–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó arguments, —â–æ –º—ñ—Å—Ç–∏—Ç—å —É—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏. –Ø–∫—â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑—ñ–±—Ä–∞—Ç–∏ –≤—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤ –º–∞—Å–∏–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ü—ñ—è rest.

// const add = (...args) => {
//   console.log(args);
// };

// add(1, 2, 3); // [1, 2, 3]

// –ó–∞–¥–∞—á–∞:
// –ß–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—É arguments —É —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó?

// –¢–∞–∫
//* –ù—ñ
// Result

//* –°–∞–º–µ —Ç–∞–∫! –£ —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –Ω–µ–º–∞—î –ª–æ–∫–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó arguments.

// ? –ö–æ–ª–±–µ–∫–∏
// –ê–Ω–æ–Ω—ñ–º–Ω—ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥–º—ñ–Ω–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –¥–ª—è –∫–æ–ª–±–µ–∫—ñ–≤ –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –º–∞—Å–∏–≤—É –∑–∞–≤–¥—è–∫–∏ –∫–æ—Ä–æ—Ç—à–æ–º—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, –æ—Å–æ–±–ª–∏–≤–æ —è–∫—â–æ –∫–æ–¥ —É
// —Ç—ñ–ª—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ –≥—Ä–æ–º—ñ–∑–¥–∫–∏–π.

// const numbers = [5, 10, 15, 20, 25];

// // –ó–≤–∏—á–∞–π–Ω–∞ –∞–Ω–æ–Ω—ñ–º–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
// numbers.forEach(function (number, index) {
//   console.log(`Index ${index}, value ${number}`);
// });

// // –°—Ç—Ä—ñ–ª–æ—á–Ω–∞ –∞–Ω–æ–Ω—ñ–º–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
// numbers.forEach((number, index) => {
//   console.log(`Index ${index}, value ${number}`);
// });

// –°—Ç—Ä—ñ–ª–æ—á–Ω—É –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—é —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –æ–≥–æ–ª–æ—à—É–≤–∞—Ç–∏ –æ–∫—Ä–µ–º–æ –π –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –Ω–∞ –Ω–µ—ó –ø–æ—Å–∏–ª–∞–Ω–Ω—è.–¶–µ –≤–∞—Ä—Ç–æ —Ä–æ–±–∏—Ç–∏, —è–∫—â–æ –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –¥–µ–∫—ñ–ª—å–∫–æ—Ö
// –º—ñ—Å—Ü—è—Ö –ø—Ä–æ–≥—Ä–∞–º–∏ –∞–±–æ —è–∫—â–æ –≤–æ–Ω–∞ –≥—Ä–æ–º—ñ–∑–¥–∫–∞.

// const numbers = [5, 10, 15, 20, 25];

// const logMessage = (number, index) => {
//   console.log(`Index ${index}, value ${number}`);
// };

// numbers.forEach(logMessage);

// –ß–æ–º—É —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑—Ä—É—á–Ω—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —è–∫ –∫–æ–ª–±–µ–∫–∏?

//* –ó–∞–≤–¥—è–∫–∏ —ó—Ö–Ω—å–æ–º—É –∫–æ—Ä–æ—Ç—à–æ–º—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
// –¢–æ–º—É —â–æ –≤–æ–Ω–∏ –ø—Ä–∞—Ü—é—é—Ç—å —à–≤–∏–¥—à–µ, –Ω—ñ–∂ –∑–≤–∏—á–∞–π–Ω—ñ
// Result

// * –ó–≤—ñ—Å–Ω–æ, —Ç–∞–∫! –ê–Ω–æ–Ω—ñ–º–Ω—ñ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑—Ä—É—á–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ –∫–æ–ª–±–µ–∫–∏ –¥–ª—è –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –º–∞—Å–∏–≤—É –∑–∞–≤–¥—è–∫–∏ –∫–æ—Ä–æ—Ç—à–æ–º—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.

// –ó–∞–¥–∞—á–∞:

// Refactor the calculateTotalPrice(orderedItems) function by replacing its declaration with an arrow function. Also, replace the callback function passed to the forEach() method with an arrow function.

// The variable calculateTotalPrice is declared.
// The variable calculateTotalPrice is assigned an arrow function with the parameter (orderedItems).
// To iterate over the orderedItems array, the forEach method is used.
// The callback for the forEach method is an arrow function.
// Calling the calculateTotalPrice([12, 85, 37, 4]) function returns 138.
// Calling the calculateTotalPrice([164, 48, 291]) function returns 503.
// Calling the calculateTotalPrice([412, 371, 94, 63, 176]) function returns 1116.
// Calling a function with random but valid arguments returns the correct value.

//
// –ó–∞–¥–∞—á–∞: –ê —Ç–µ–ø–µ—Ä –¥–∞–≤–∞–π —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –∑–∞–¥–∞—á—É ¬´–§—ñ–ª—å—Ç—Ä —á–∏—Å–µ–ª¬ª?

// Replace the declaration of the filterArray() function and callbacks for the forEach() method with arrow functions.

// The variable filterArray is declared.
// The filterArray variable is assigned an arrow function with parameters (numbers, value).
// The forEach method is used to iterate over the numbers array.
// The callback for the forEach method is an arrow function.
// Calling the filterArray([1, 2, 3, 4, 5], 3) function returns [4, 5].
// Calling the filterArray([1, 2, 3, 4, 5], 4) function returns [5].
// Calling the filterArray([1, 2, 3, 4, 5], 5) function returns [].
// Calling the filterArray([12, 24, 8, 41, 76], 38) function returns [41, 76].
// Calling the filterArray([12, 24, 8, 41, 76], 20) function returns [24, 41, 76].
// A function call with random but valid arguments returns the correct value.

// function filterArray(numbers, value) {
//     const filteredNumbers = [];
  
//     numbers.forEach(function (number) {
//       if (number > value) {
//         filteredNumbers.push(number);
//       }
//     });
  
//     return filteredNumbers;
//   }

// // !  –ú–µ—Ç–æ–¥–∏ map —ñ flatMap
// //?   –ß–∏—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
//   –§—É–Ω–∫—Ü—ñ—è –∑ –ø–æ–±—ñ—á–Ω–∏–º–∏ –µ—Ñ–µ–∫—Ç–∞–º–∏ ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–æ–∂–µ:
//    –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
//   –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –ø–æ—Å–∏–ª–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø—É
//   –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–≤–µ–¥–µ–Ω–Ω—è-–≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–æ—â–æ
  
//    const dirtyMultiply = (array, value) => {
//     for (let i = 0; i < array.length; i += 1) {
//       array[i] = array[i] * value;
//     }
//   };
  
//   const numbers = [1, 2, 3, 4, 5];
//   dirtyMultiply(numbers, 2);
//   // –í—ñ–¥–±—É–ª–∞—Å—è –º—É—Ç–∞—Ü—ñ—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö - –º–∞—Å–∏–≤—É numbers
//   console.log(numbers); // [2, 4, 6, 8, 10]
  
// –§—É–Ω–∫—Ü—ñ—è dirtyMultiply(array, value) –º–Ω–æ–∂–∏—Ç—å –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É array –Ω–∞ —á–∏—Å–ª–æ value. –í–æ–Ω–∞ –∑–º—ñ–Ω—é—î (–º—É—Ç—É—î) –≤–∏—Ö—ñ–¥–Ω–∏–π –º–∞—Å–∏–≤ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.
// –ß–∏—Å—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è(pure function) ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–∫–æ—ó –∑–∞–ª–µ–∂–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥ –∑–Ω–∞—á–µ–Ω—å –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.–ó–∞ —É–º–æ–≤–∏ –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –≤–æ–Ω–∞
// –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–¥–∏–Ω —ñ —Ç–æ–π —Å–∞–º–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ –Ω–µ –º–∞—î –ø–æ–±—ñ—á–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤, —Ç–æ–±—Ç–æ –Ω–µ –∑–º—ñ–Ω—é—î –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.
//   –ù–∞–ø–∏—à–µ–º–æ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é —á–∏—Å—Ç–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –º–Ω–æ–∂–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –Ω–µ –∑–º—ñ–Ω—é—é—á–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π.
  
//   const pureMultiply = (array, value) => {
//     const newArray = [];
  
//     array.forEach(element => {
//       newArray.push(element * value);
//     });
  
//     return newArray;
//   };
  
//   const numbers = [1, 2, 3, 4, 5];
//   const doubledNumbers = pureMultiply(numbers, 2);
  
//   // –ú—É—Ç–∞—Ü—ñ—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö –Ω–µ –≤—ñ–¥–±—É–ª–∞—Å—è
//   console.log(numbers); // [1, 2, 3, 4, 5]
//   // –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∑—ñ –∑–º—ñ–Ω–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
//   console.log(doubledNumbers); // [2, 4, 6, 8, 10]

// 

