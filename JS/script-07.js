//!!! Об'єктна модель документація
// JavaScript у браузері
// Коли JavaScript виконується у браузері, у нього є додатковий функціонал для роботи з вкладкою.Цей функціонал складається
// з таких модулів: ECMAScript, DOM, BOM.

//     ECMAScript(скорочено ES) — це стандарт, який описує мову програмування JavaScript.Цей стандарт визначає синтаксис і
// семантику мови, а також набір вбудованих об'єктів і функцій для роботи з даними, текстом, датами та іншими аспектами
// програмування.ECMAScript надає основну структуру мови, на якій базується JavaScript.Різні версії JavaScript реалізуються
// через різні версії стандарту ECMAScript.Наприклад, ES5, ES6(або ES2015), ES2016, ES2017 тощо — це різні версії ECMAScript,
// які впроваджують нові можливості та покращення в мову.
// Об'єктна модель документа (Document Object Model) — незалежний інтерфейс для роботи з HTML-документом. Ця модель містить
// набір властивостей і методів, що дозволяють шукати, створювати й видаляти елементи, реагувати на дії користувача і багато
// іншого, тобто поєднує сторінку з мовою програмування.

// DOM — це відображення HTML - документа.Виглядає як деревоподібна структура, у якій кожен вузол — це JavaScript - об'єкт
// із властивостями та методами, що становить частину HTML - документа.Кожен елемент у документі, весь документ в цілому,
// заголовок, посилання, абзац — це частини DOM цього документа, тому всі вони можуть бути змінені з JavaScript - коду.

// Об'єктна модель браузера (Browser Object Model) — незалежний від мови інтерфейс для роботи з браузером. Містить набір
// властивостей і методів, що дозволяють отримати доступ до ряду функцій браузера.Саме завдяки BOM можна отримувати розміри
// вікна браузера, читати URL, працювати з історією навігації, місцем розташування тощо.

//? HTML-документ і DOM

// Згідно з DOM-моделлю, кожен тег утворює окремий елемент-вузол (element node), а кожен фрагмент тексту всередині
// елемента — текстовий вузол (text node).

// HTML - документ — це ієрархічне дерево, у якому кожен елемент(окрім кореневого) вкладений в один батьківський елемент.

// На схемі бачимо, що елемент html розташовується всередині document.Отже, document — це батьківський елемент для html.
// Аналогічно, html— батьківський елемент для[head](<http://head.nf>) і body. У document нема батьківського елемента,
// бо document — це кореневий елемент.За рахунок вкладеної структури тегів і текстових елементів утворюється ієрархічне дерево.
// Як складається DOM-дерево?
// Щоб відобразити HTML-документ, браузер спочатку перетворює його у формат, який він розуміє — DOM.Інтерпретатор браузера має
// спеціальний фрагмент коду — HTML-парсер, який використовується для перетворення HTML у DOM.
// Браузер будує DOM поступово, щойно надходять перші фрагменти коду, він починає парсити HTML, додаючи вузли в деревоподібну структуру.
// Після того як DOM-дерево побудовано, у ньому можна знайти елемент за допомогою JavaScript.Оскільки кожен елемент має інтерфейс
// із безліччю властивостей і методів, з ним можна виконувати необхідні дії.

//todo  Test:

// Який елемент є кореневим у DOM-дереві?

// window
//* document
// html
// body
// Result

//* У DOM-дереві document — це кореневий елемент, він не вкладений ні в один батьківський елемент.

//!!! Пошук елементів

// Тобі вже відомо, що DOM - елемент — це об'єкт із властивостями й методами. Саме час навчитися швидко знаходити елемент 
// за довільним CSS - селектором.
// Група методів elem.querySelector * — це сучасний стандарт для пошуку елементів.Вони дозволяють знайти елемент 
// або групу елементів за CSS - селектором.

// element.querySelector(selector)
// Використовується, якщо необхідно знайти тільки один, найчастіше унікальний елемент.
// Повертає перший знайдений елемент усередині element, що відповідає рядку CSS - селектора selector.Навіть якщо їх декілька,
// завжди повернеться посилання тільки на перший елемент у DOM - дереві.
// Якщо нічого не знайдено, то поверне null
// Доступ до DOM починається з об'єкта document, з нього можна дістатися до будь-яких елементів. Об’єкт document — це частина 
// глобального об'єкта window, який доступний у скрипті, коли він виконується в браузері. Так само як alert, console.log і багато інших.

// element.querySelectorAll(selector)

// Використовується, якщо необхідно знайти колекцію елементів, тобто отримати масив посилань на елементи з однаковим
// селектором.Наприклад, усі елементи списку з класом list - item.
// Повертає псевдомасив усіх елементів всередині element, які відповідають CSS-селектору selector
// Якщо нічого не знайдено, поверне порожній масив

//todo  Test:
//* Що має містити рядок, який передають аргументом методу querySelector?

//* CSS селектор елемента
// Клас елемента
// Ім’я тега
// Result

//* Точнісінько так! Рядок, який передають аргументом методу querySelector, має містити CSS-селектор selector елемента.

//todo  Test :

//     < h2 class="heading" > Latest news</ >

// Вибери правильний код для отримання посилання в JavaScript коді на HTML-елемент

// document.querySelectorAll(".heading")
//* document.querySelector(".heading")
// window.querySelector(".heading")
// querySelector(".heading")
// Result

//* Саме так! Правильний код для отримання посилання на HTML - елемент із класом "heading" у JavaScript коді — це
// document.querySelector(".heading").



